#lang rhombus/static/and_meta

import:
  lib("racket/gui/easy.rkt")
  rhombus/draw/private/symbol_map.symbol_map_annot
  "type.rhm":
    expose:
      Alignment
      SpacingInteger
      Margin
      Size
      Stretch
      LabelString
  "view.rhm".View
  "view.rhm"!private.to_view
  "obs.rhm":
    expose:
      Obs
      MaybeObs

export:
  HPanel
  VPanel
  GroupPanel
  TabsPanel

symbol_map_annot PanelStyleSymbol convert_style:
  { deleted: deleted,
    border: border,
    vscroll: vscroll,
    hscroll: hscroll,
    auto_vscroll: #{auto-vscroll},
    auto_hscroll: #{auto-hscroll},
    hide_vscroll: #{hide-vscroll},
    hide_hscroll: #{hide-hscroll} }

defn.macro 'def_panel $name($arg :: $arg_annot ... => $convert, ...):
              ~easy: $easy_name
              $body
              ...':
  'class $name(hand):
     implements View
     opaque
     override property handle: hand

     constructor ($arg :: $arg_annot ..., ...,
                  ~alignment: alignment :: MaybeObs.of(Alignment) = [#'center, #'center],
                  ~style: style :: MaybeObs.of(List.of($(name).StyleSymbol)) = [],
                  ~is_enabled: is_enabled :: MaybeObs.of(Boolean) = #true,
                  ~spacing: spacing :: MaybeObs.of(SpacingInteger) = 0,
                  ~margin: margin :: MaybeObs.of(Margin) = [0, 0],
                  ~min_size: min_size :: MaybeObs.of(Size) = [#false, #false],
                  ~stretch: stretch :: MaybeObs.of(Stretch) = [#true, #true],
                  child :: MaybeObs.of(View),
                  $'...'):
       super(easy . $easy_name($convert($arg), ...,
                               ~alignment: obs.unwrap(alignment),
                               #{#:enabled?}: obs.unwrap(is_enabled),
                               ~style: obs.unwrap_list(style, convert_style),
                               ~spacing: obs.unwrap(spacing),
                               ~margin: obs.unwrap_list(margin, values),
                               #{#:min-size}: obs.unwrap_list(min_size, values),
                               ~stretch: obs.unwrap_list(stretch, values),
                               to_view(child).handle,
                               $'...'))

     $body
     ...'

def_panel HPanel():
  ~easy: hpanel

  export:
    StyleSymbol
  annot.macro 'StyleSymbol': 'PanelStyleSymbol'

def_panel VPanel():
  ~easy: vpanel

  export:
    StyleSymbol
  annot.macro 'StyleSymbol': 'PanelStyleSymbol'

def_panel GroupPanel(label :: MaybeObs.of(LabelString) => (obs.unwrap)):
  ~easy: group
  
  export:
    StyleSymbol
  symbol_map_annot StyleSymbol convert_style:
    { deleted: deleted }

class TabsPanel(hand, private _at_selection :: Obs):
  implements View
  opaque
  override property handle: hand

  constructor (choices :: MaybeObs.of(List),
               ~choice_to_label: choice_to_label :: Function.of_arity(1) = values,
               ~choice_equal: choice_equal :: Function.of_arity(2) = (fun (a, b): a == b),
               ~selection: selection :: MaybeObs.of(Any) = #false,
               ~action: action :: maybe(Function.of_arity(3)) = #false,
               ~alignment: alignment :: MaybeObs.of(Alignment) = [#'center, #'top],
               ~style: style :: MaybeObs.of(List.of(TabsPanel.StyleSymbol)) = [],
               ~is_enabled: is_enabled :: MaybeObs.of(Boolean) = #true,
               ~spacing: spacing :: MaybeObs.of(SpacingInteger) = 0,
               ~margin: margin :: MaybeObs.of(Margin) = [0, 0],
               ~min_size: min_size :: MaybeObs.of(Size) = [#false, #false],
               ~stretch: stretch :: MaybeObs.of(Stretch) = [#true, #true],
               child :: MaybeObs.of(View),
               ...):
    def at_selection = obs.to_obs(selection)
    def use_action = action || (fun(what, choices, selected):
                                  at_selection.value := selected)
    super(easy.tabs(obs.unwrap_list(choices, values),
                    use_action,
                    ~selection: obs.unwrap(at_selection),
                    #{#:choice->label}: choice_to_label,
                    #{#:choice=?}: choice_equal,
                    ~alignment: obs.unwrap(alignment),
                    #{#:enabled?}: obs.unwrap(is_enabled),
                    ~style: obs.unwrap_list(style, convert_style),
                    ~spacing: obs.unwrap(spacing),
                    ~margin: obs.unwrap_list(margin, values),
                    #{#:min-size}: obs.unwrap_list(min_size, values),
                    ~stretch: obs.unwrap_list(stretch, values),
                    to_view(child).handle,
                    ...),
          at_selection)

  property at_selection :: Obs:
    _at_selection.map(values)

  export:
    StyleSymbol
  symbol_map_annot StyleSymbol convert_style:
    { no_border: #{no-border},
      can_reorder: #{can-reorder},
      can_close: #{can-close},
      new_button: #{new-button},
      flat_portable: #{flat-portable},
      deleted: deleted }
