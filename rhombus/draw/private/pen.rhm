#lang rhombus/static/and_meta
import:
  "rkt.rhm"
  "color.rhm".Color
  "color.rhm"!private._Color
  "color.rhm"!private.unwrap_color
  "symbol_map.rhm":
    expose: symbol_map_annot
            symbol_set_annot
  "bitmap-interface.rhm".BitmapForward as Bitmap
  "bitmap-interface.rhm".Bitmap as BitmapPrivate

export:
  Pen

submodule private:
  export:
    _Pen

expr.macro 'default($like . $field, $expr)':
  'if $like | Pen . $field($like) | $expr'

class Pen(handle):
  internal _Pen
  opaque
  constructor (~like: like :: maybe(Pen) = #false,
               ~color: color :: (String || Color) = default(like.color, "Black"),
               ~width: width :: Real.in(0, 255) = default(like.width, 1),
               ~style: style :: Pen.Style = default(like.style, #'solid),
               ~cap: cap :: Pen.Cap = default(like.cap, #'round),
               ~join: join :: Pen.Join = default(like.join, #'round),
               ~stipple: stipple :: maybe(Bitmap) = default(like.stipple, #false)):
    if stipple
    | _Pen(rkt.make_object(rkt.#{pen%}, unwrap_color(color), width, style_convert(style), cap, join,
                           BitmapPrivate.handle(stipple)))
    | _Pen(rkt.send rkt.#{the-pen-list}.#{find-or-create-pen}(unwrap_color(color), width, style_convert(style), cap, join))
  property color :: Color: _Color(rkt.send handle.#{get-color}())
  property width: rkt.send handle.#{get-width}()
  property style: style_unconvert(rkt.send handle.#{get-width}())
  property cap: rkt.send handle.#{get-cap}()
  property join: rkt.send handle.#{get-join}()
  property stipple :: maybe(Bitmap):
    let bm = rkt.send handle.#{get-stipple}()
    bm && BitmapPrivate(bm)

  export:
    none
    Style
    Cap
    Join

  symbol_map_annot Style style_convert style_unconvert:
    { transparent: transparent,
      solid: solid,
      xor: xor,
      hilite: hilite,
      dot: dot,
      long_dash: #{long-dash},
      show_dash: #{short-dash},
      dot_dash: #{dot-dash},
      xor_dot: #{xor-dot},
      xor_long_dot: #{xor-long-dash},
      xor_short_dot: #{xor-short-dash},
      xor_dot_dash: #{xor-dot-dash} }

  symbol_set_annot Cap:
    { round, projecting, butt}

  symbol_set_annot Join:
    { round, bevel, miter }

def none = _Pen(rkt.send rkt.#{the-pen-list}.#{find-or-create-pen}(rkt.#{make-color}(0, 0, 0),
                                                                   1,
                                                                   #'transparent))
