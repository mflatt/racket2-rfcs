#lang rhombus/static/and_meta
import:
  "rkt.rhm"
  "color.rhm".Color
  "color.rhm"!private._Color
  "color.rhm"!private.unwrap_color
  "symbol_map.rhm":
    expose:
      symbol_map_annot
      symbol_set_annot
  "bitmap-interface.rhm".BitmapForward as Bitmap
  "bitmap-interface.rhm".Bitmap as _Bitmap

export:
  Pen

module private:
  export:
    _Pen

class Pen(private _handle):
  internal _Pen
  property handle: _handle

  constructor (~color: color :: (String || Color) = "Black",
               ~width: width :: Real.in(0, 255) = 1,
               ~style: style :: Pen.Style = #'solid,
               ~cap: cap :: Pen.Cap = #'round,
               ~join: join :: Pen.Join = #'round,
               ~stipple: stipple :: maybe(Bitmap) = #false):
    let hand:
      if stipple
      | rkt.make_object(rkt.#{pen%}, unwrap_color(color), width, style_convert(style), cap, join,
                        (stipple :~ _Bitmap).handle)
      | rkt.send rkt.#{the-pen-list}
          .#{find-or-create-pen}(unwrap_color(color), width, style_convert(style), cap, join)
    super(hand)

  property color :: Color: _Color(rkt.send handle.#{get-color}())
  property width: rkt.send handle.#{get-width}()
  property style: style_unconvert(rkt.send handle.#{get-style}())
  property cap: rkt.send handle.#{get-cap}()
  property join: rkt.send handle.#{get-join}()
  property stipple :: maybe(Bitmap):
    let bm = rkt.send handle.#{get-stipple}()
    bm && _Bitmap(bm)

  reconstructor_fields:
    color: this.color
    width: this.width
    style: this.style
    cap: this.cap
    join: this.join
    stipple: this.stipple
  reconstructor (color, width, style, cap, join, stipple):
    Pen(~color: color, ~width: width, ~style: style, ~cap: cap, ~join: join, ~stipple: stipple)

  export:
    none
    Style
    Cap
    Join

  symbol_map_annot Style style_convert style_unconvert:
    { transparent: transparent,
      solid: solid,
      xor: xor,
      hilite: hilite,
      dot: dot,
      long_dash: #{long-dash},
      show_dash: #{short-dash},
      dot_dash: #{dot-dash},
      xor_dot: #{xor-dot},
      xor_long_dot: #{xor-long-dash},
      xor_short_dot: #{xor-short-dash},
      xor_dot_dash: #{xor-dot-dash} }

  symbol_set_annot Cap:
    { round, projecting, butt}

  symbol_set_annot Join:
    { round, bevel, miter }

def none = _Pen(rkt.send rkt.#{the-pen-list}
                  .#{find-or-create-pen}(rkt.#{make-color}(0, 0, 0),
                                         1,
                                         #'transparent))
