#lang rhombus/static/and_meta
import:
  "rkt.rhm"
  "type.rhm" open
  "dc-interface.rhm".DCForward as DC
  "dc-interface.rhm"._DC
  "region-interface.rhm" as intf
  "symbol_map.rhm":
    expose:
      symbol_map_annot

export:
  Region

module private:
  export:
    _Region
    set_wrap_dc

class Region():
  internal _Region
  extends intf.Region

  constructor(dc :: maybe(DC) = #false):
    super(rkt.make_object(rkt.#{region%}, dc && (dc :: _DC).handle))()

  property dc :: maybe(DC):
    let dc = rkt.send handle.#{get-dc}()
    dc && wrap_dc(dc)

  method is_empty():
    rkt.send handle.#{is-empty?}()

  method contains(pt :: PointLike):
    rkt.send handle.#{in-region?}(pt.x, pt.y)

  method rectangle(r :: RectLike):
    rkt.send handle.#{set-rectangle}(r.x, r.y, r.width, r.height)

  method rounded_rectangle(r :: RectLike,
                           radius :: Real = -0.25):
    rkt.send handle.#{set-rounded-rectangle}(r.x, r.y, r.width, r.height, radius)

  method ellipse(r :: RectLike):
    rkt.send handle.#{set-ellipse}(r.x, r.y, r.width, r.height)

  method arc(r :: RectLike,
             start_radians :: Real, end_radians :: Real):
    rkt.send handle.#{set-arc}(r.x, r.y, r.width, r.height, start_radians, end_radians)

  method polygon([pt :: PointLike, ...],
                 ~dpt: dpt :: PointLike = Point.zero,
                 ~dx: dx :: Real = 0,
                 ~dy: dy :: Real = 0,
                 fill :: Region.Fill = #'odd_even):
    rkt.send handle.#{set-polygon}(PairList[Pair(pt.x, pt.y), ...], dpt.x + dx, dpt.y + dy, fill_convert(fill))

  method path(p :: Path,
              ~dpt: dpt :: PointLike = Point.zero,
              ~dx: dx :: Real = 0.0,
              ~dy: dy :: Real = 0.0,
              ~fill: fill :: Region.Fill = #'odd_even):
    rkt.send handle.#{set-path}(p, dpt.x + dx, dpt.y + dy, fill_convert(fill))

  method union(region :: Region):
    rkt.send handle.#{union}(region.handle)
  method intersect(region :: Region):
    rkt.send handle.#{intersect}(region.handle)
  method subtract(region :: Region):
    rkt.send handle.#{subtract}(region.handle)
  method xor(region :: Region):
    rkt.send handle.#{xor}(region.handle)

  export:
    Fill

  symbol_map_annot Fill fill_convert:
    { odd_even: #{odd-even},
      winding: winding }

def mutable wrap_dc = #false
fun set_wrap_dc(f): wrap_dc := f
