#lang rhombus/static/and_meta
import:
  "rkt.rhm"
  "dc-interface.rhm".DC as DCer
  "dc-interface.rhm"._DC as _DCer
  "dc-interface.rhm".DCForward
  "color.rhm".Color
  "pen.rhm".Pen
  "pen.rhm"!private._Pen
  "brush.rhm".Brush
  "brush.rhm"!private._Brush
  "font.rhm".Font
  "font.rhm"!private._Font
  "region.rhm".Region
  "region.rhm"!private._Region
  "region.rhm"!private.set_wrap_dc
  "path.rhm".Path
  "symbol_map.rhm":
    expose:
      symbol_map_annot
      symbol_set_annot
  "bitmap-interface.rhm".Bitmap

export:
  DC

submodule internal:
  export:
    SomeDC
    DCer

interface DC:
  private method get_dc():
    (this :: _DCer).dc

  dot_provider
  | '$left $dot $(name && 'save_and_restore')':
      ~tail: tail
      match tail
      | ': $body':
          values('block:
                    let dc :: DC = $left
                    try:
                      ~initially dc.push()
                      block $tail
                      ~finally dc.pop()',
                 '')
      | _:
          Syntax.error("expected a block afterward", name)
  | '$_': #false    

  property size :: matching([_ :: NonnegReal,
                             _ :: NonnegReal]):
    def (w, h) = rkt.send get_dc().#{get-size}()
    [w, h]

  property width: size[0]
  property height: size[1]

  method push()
  method pop()

  method clear():
    rkt.send get_dc().clear()

  method font_metrics_key():
    rkt.send get_dc().#{cache-font-metrics-key}()

  property
  | pen :: Pen:
      _Pen(rkt.send get_dc().#{get-pen}())
  | pen := p :: Pen:
      rkt.send get_dc().#{set-pen}(p.handle)

  property
  | brush :: Brush:
      _Brush(rkt.send get_dc().#{get-brush}())
  | brush := b :: Brush:
      rkt.send get_dc().#{set-brush}(b.handle)

  property
  | font :: Font:
      _Font(rkt.send get_dc().#{get-font}())      
  | font := f :: Font:
      rkt.send get_dc().#{set-font}(f.handle)

  property
  | clipping_region :: Maybe(Region):
      let r = rkt.send get_dc().#{get-clipping-region}()
      r && _Region(r)
  | clipping_region := region :: Maybe(Region):
      rkt.send get_dc().#{set-clipping-region}(region && Region.handle(region))
    
  method copy(x :: Real, y :: Real,
              width :: NonnegReal, height :: NonnegReal,
              x2 :: Real, y2 :: Real):
    rkt.send get_dc().copy(x, y, width, height, x2, y2)

  method point(x :: Real, y :: Real):
    rkt.send get_dc().#{draw-point}(x, y)

  method line(x :: Real, y :: Real,
              x2 :: Real, y2 :: Real):
    rkt.send get_dc().#{draw-line}(x, y, x2, y2)
    
  method lines([[x :: Real, y :: Real], ...],
               ~dx: dx :: Real = 0.0,
               ~dy: dy :: Real = 0.0):
    rkt.send get_dc().#{draw-lines}([Pair(x, y), ...], dx, dy)

  method polygon([[x :: Real, y :: Real], ...],
                 ~dx: dx :: Real = 0.0,
                 ~dy: dy :: Real = 0.0,
                 ~fill: fill :: Region.Fill = #'odd_even):
    rkt.send get_dc().#{draw-polygon}([Pair(x, y), ...], dx, dy, fill_convert(fill))

  method path(p :: Path,
              ~dx: dx :: Real = 0.0,
              ~dy: dy :: Real = 0.0,
              ~fill: fill :: Region.Fill = #'odd_even):
    rkt.send get_dc().#{draw-path}(p.hand, dx, dy, fill_convert(fill))

  method rectangle(x :: Real, y :: Real,
                   width :: NonnegReal, height :: NonnegReal):
    rkt.send get_dc().#{draw-rectangle}(x, y, width, height)
    
  method rounded_rectangle(x :: Real, y :: Real,
                           width :: NonnegReal, height :: NonnegReal,
                           radius :: Real = -0.25):
    rkt.send get_dc().#{draw-rounded-rectangle}(x, y, width, height, radius)
    
  method ellipse(x :: Real, y :: Real,
                 width :: NonnegReal, height :: NonnegReal):
    rkt.send get_dc().#{draw-ellipse}(x, y, width, height)
    
  method arc(x :: Real, y :: Real,
             width :: NonnegReal, height :: NonnegReal,
             start :: Real, end :: Real):
    rkt.send get_dc().#{draw-arc}(x, y, width, height, start, end)

  method spline(x1 :: Real, y1 :: Real,
                x2 :: Real, y2 :: Real,
                x3 :: Real, y3 :: Real):
    rkt.send get_dc().#{draw-spline}(x1, y1, x2, y2, x3, y3)

  method bitmap(b :: Bitmap,
                x :: Real, y :: Real,
                ~source_x: source_x :: Real = 0,
                ~source_y: source_y :: Real = 0,
                ~source_width: source_width :: NonnegReal = b.width,
                ~source_height: source_height :: NonnegReal = b.height,
                ~style: style :: DC.BitmapOverlay = #'solid,
                ~color: color :: Color = Color("black"),
                ~mask: mask :: Maybe(Bitmap) = #false):
    rkt.send get_dc().#{draw-bitmap-section}(b.handle, x, y,
                                             source_x, source_y,
                                             source_width, source_height,
                                             style, color.handle, mask)
    #void

  method text(str :: String,
              x :: Real, y :: Real,
              ~combine: combine :: DC.TextCombine = #'kern,
              ~angle: angle :: Real = 0.0):
    rkt.send get_dc().#{draw-text}(str, x, y,
                                   match combine
                                   | #'kern: #true
                                   | #'grapheme: #'grapheme
                                   | ~else: #false,
                                   0,
                                   angle)

  method | scale(sx :: Real, sy :: Real):
             rkt.send get_dc().#{scale}(sx, sy)
         | scale(s :: Real):
             rkt.send get_dc().#{scale}(s, s)
  method translate(dx :: Real, dy :: Real):
    rkt.send get_dc().#{translate}(dx, dy)
  method rotate(radians :: Real):
    rkt.send get_dc().#{rotate}(radians)
  method transform(a :: Transformation):
    rkt.send get_dc().#{transform}(a)

  property | transformation :: Transformation:
               let Array(a, x, y, sx, sy, rot) =  rkt.send get_dc().#{get-transformation}()
               a
           | transformation := a :: Transformation:
               let Array(old_a, x, y, sx, sy, rot) =  rkt.send get_dc().#{get-transformation}()
               rkt.send get_dc().#{set-transformation}(Array(a, x, y, sx, sy, rot))

  export:
    BitmapOverlay
    TextCombine
    Fill
    Transformation

  symbol_set_annot BitmapOverlay:
    { solid, opaque, xor }

  symbol_set_annot TextCombine:
    { kern, grapheme, char }

  symbol_map_annot Fill fill_convert:
    { odd_even: #{odd-even},
      winding: winding }

  annot.macro 'Transformation':
    'matching(Array(_ :: Real, _ :: Real,
                    _ :: Real, _ :: Real,
                    _ :: Real, _ :: Real))'

namespace main:
  export: DC

namespace some_dc:
  export:
    rename: DC as SomeDC

  // defined as `DC` for default printer, then exported as `SomeDC`
  class DC(handle):
    nonfinal
    opaque
    implements main.DC
    private implements DCer
    private override property dc: handle

    private field states = []

    override method push():
      states := [pen,
                 brush,
                 font,
                 clipping_region,
                 transformation,
                 states]
    
    override method pop():
      match states
      | []:
          error("DC.pop", "no state pushed")
      | [old_pen,
         old_brush,
         old_font,
         old_region,
         old_transformation,
         old_states]:
          pen := old_pen
          brush := old_brush
          font := old_font
          clipping_region := old_region
          transformation := old_transformation
          states := old_states

  set_wrap_dc(DC)

import: .some_dc.SomeDC

annot.delayed_complete DCForward: DC
