#lang rhombus/static/and_meta
import:
  lib("racket/base.rkt").pregexp

// An example use of `sublanguage.enforest`

export:
  // The main form:
  rx

/*
  // Operators for use inside `rx'...'`:
  any
  || * ? ^ $
  // Implicit operators, like the one before a literal string;
  // we use `names` here so that these names are not
  // misinterpreted as implicits in the `export` sublangauge!
  names: #{#%literal} #{#%comp} #{#%parens} #{#%juxtapose}
*/

// Instantiate enforestation and macro machinery for the
// regexp sublanguage:
space.enforest regexp:
  space_path my/space
  export_macro macro
  meta_namespace regexp_meta:
    export_syntax_class Group
    macro_result: fun (stx, who):
                    unless (stx is_a Syntax
                              && (stx -: Syntax).unwrap() is_a String)
                    | Syntax.error("bad result", stx)
                    stx
    identifier_transformer: fun (id):
                               Syntax.error("identifier not allowed", id)
    description "regexp"

expr.macro '«rx '$(pat :: regexp_meta.Group)'»':
  'pregexp($pat.parsed)'

regexp.macro 'any': '"."'

// `#{#%literal}` is implicitly added before literals, like strings,
// that do not have an operator before
regexp.macro '#{#%literal} $(s :: String)':
  import lib("racket/base.rkt").#{regexp-quote}
  '$(#{regexp-quote}(s.unwrap()))'

// `#{#%parens}` is implicitly added before parentheses
// that do not have a parsed term or operator before
regexp.macro '#{#%parens} ($(p :: regexp_meta.Group))':
  p.parsed

// `#{#%juxtapose}` is implicitly added after something that's
// parsed and before a non-operator
regexp.macro '$left #{#%juxtapose} $right':
  ~weaker_than: ~other
  ~stronger_than: ||
  '$(left.unwrap() ++ right.unwrap())'

// `#{#%call}` is implicitly added between a parsed term
// and parentheses; we want just the same thing
// as juxtaposition here, though
regexp.macro '$left #{#%call} ($(p :: regexp_meta.Group))':
  '$(left.unwrap() ++ p.parsed.unwrap())'

regexp.macro '$left || $right':
  ~weaker_than: ~other
  '$("(?:" +& left.unwrap() +& "|" +& right.unwrap() +& ")")'

regexp.macro '$left *':
  '$(left.unwrap() ++ "*")'

regexp.macro '$left +':
  '$(left.unwrap() ++ "+")'

regexp.macro '$left ?':
  '$(left.unwrap() ++ "?")'

// `#{#%call}` is implicitly added between a parsed term
// and curly braces
regexp.macro
| '$left #{#%comp} {$(min :: Integer), _}':
    '$(left.unwrap() ++ "{" +& min.unwrap() ++ ",}")'
| '$left #{#%comp} {$(min :: Integer), $(max :: Integer)}':
    '$(left.unwrap() ++ "{" +& min.unwrap() ++ "," +& max.unwrap() ++ "}")'
| '$left #{#%comp} {$(count :: Integer)}':
    '$(left.unwrap() ++ "{" +& count.unwrap() ++ "}")'

regexp.macro
| '^ $right':
    '$("^" +& right.unwrap())'

regexp.macro
| '$left $('$')':
    ~same_as: ^
    '$(left.unwrap() +& "$")'

// Example regexps

check:
  rx'^ ("Hello" || "Hi") " "? ("Here"||"There") $'
  ~completes

check:
  rx'(^ "Hello" || "Hi"{1, 22} || "At("any*")") $'
  ~completes
