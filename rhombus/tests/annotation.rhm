#lang rhombus

// check for sensible precedence of `::` mixed with expression
check:
  "a" :: String && #true ~is #true
  "a" :: String +& "ok" ~is "aok"

check:
  ~eval
  "a" :: PosInt . count()
  ~throws "operators with inconsistently declared precedence"

check:
  0 :: converting(fun (i :: Int when i mod 3 == 0): i)
  1 :: converting(fun (i :: Int unless i mod 3 == 0): i)
  [1, 2, 3] :: converting(fun ([x, ...] when math.sum(x, ...) == 6): #true)
  ~completes

check:
  0 is_a converting(fun (i :: Int when i mod 3 == 0): i)
  1 is_a converting(fun (i :: Int unless i mod 3 == 0): i)
  [1, 2, 3] is_a converting(fun ([x, ...] when math.sum(x, ...) == 6): #true)
  ~completes

block:
  fun is_multiple_of(n):
    fun (v):
      v is_a Int && v mod n == 0
  check:
    0 ~is_a satisfying(is_multiple_of(1))
    1 ~is_a satisfying(is_multiple_of(1))
    15 ~is_a satisfying(is_multiple_of(3)) && satisfying(is_multiple_of(5))

check:
  #false is_a satisfying("not a function")
  ~throws values("contract violation", "expected: Function.of_arity(1)")

check:
  #false is_a satisfying(fun (): #false)
  ~throws values("contract violation", "expected: Function.of_arity(1)")


block:
  check:
    def List(_) :: List = [1]
    ~completes
  check:
    def List(_, _, _) :: List = [1]
    ~throws values(
      "value does not satisfy annotation",
      "[1]",
      "List && matching(List(_, _, _))",
    )

check:
  def List(_, _, _) :: satisfying(fun (_): error("oops")) = [1]
  ~throws "oops"

block:
  import:
    rhombus/meta open
  annot.macro 'one_to_two':
    'converting(fun ([x]): [x, x])'
  check:
    def List(_, _) :: one_to_two = [1]
    ~completes
  check:
    def List(_, _) :: one_to_two = [1, 2]
    ~throws values(
      "value does not satisfy annotation",
      "[1, 2]",
      "one_to_two && matching(List(_, _))",
    )
  check:
    def List(_, _, _) :: one_to_two = [1]
    ~throws values(
      "value does not satisfy annotation",
      "[1]",
      "one_to_two && matching(List(_, _, _))",
    )

check:
  def List(_, _, _) :: converting(fun (_): error("oops")) = [1]
  ~throws "oops"

check:
  "x" :: (False || ((converting(fun (v): [v]) && True) || False))
  ~is ["x"]

check:
  #false :: False ~is #false
  "x" :: True ~is "x"
  "x" :: False ~throws "does not satisfy"
  #false :: True ~throws "does not satisfy"
