#lang rhombus/and_meta

block:
  import "static_arity.rhm"
  static_arity.check ~meta:
    statinfo_meta.pack(s)
    statinfo_meta.unpack(s)
    statinfo_meta.pack_group(s)
    statinfo_meta.unpack_group(s)
    statinfo_meta.wrap(form, info)
    statinfo_meta.lookup(form, key)

namespace sub:
  export x
  statinfo.macro 'x':
    '((anything, "yes"))'

check:
  expr.macro 'use_x':
    statinfo_meta.lookup('sub.x', 'anything')
  use_x
  ~is "yes"

check:
  expr.macro 'also_use_x':
    statinfo_meta.lookup('sub.x', Syntax.literal_group 'anything')
  also_use_x
  ~is "yes"

expr.macro 'two $(pre_expr :: expr_meta.Parsed) $()':
  def expr = expr_meta.parse_more(pre_expr)
  def si = statinfo_meta.lookup(expr, statinfo_meta.index_get_key)
  statinfo_meta.wrap(expr_meta.parse_more('[$expr, $expr]'),
                     '(($statinfo_meta.index_result_key,
                        $(statinfo_meta.pack('(($statinfo_meta.index_get_key, $si))'))))')

macro 'list_of_zero': '[0]'

check:
  use_static
  ((two list_of_zero)[0])[0]
  ~is 0

block:
  import:
    meta -1: rhombus/meta open
  check:
    statinfo_meta.unpack(statinfo_meta.pack('((x, y))'))
    ~matches '((x, y))'
  check:
    statinfo_meta.unpack(statinfo_meta.pack('((x, y), (z, w))'))
    ~matches '((x, y), (z, w))'
  check:
    statinfo_meta.unpack_group(statinfo_meta.pack_group('((x, y))'))
    ~matches '((x, y))'
  check:
    statinfo_meta.unpack_group(statinfo_meta.pack_group('((x, y)) ((z, w))'))
    ~matches '((x, y)) ((z, w))'

check:
  import:
    meta -1: rhombus/meta open
  use_static
  statinfo_meta.call_result_key.unwrap()
  statinfo_meta.index_result_key.unwrap()
  statinfo_meta.index_get_key.unwrap()
  statinfo_meta.index_set_key.unwrap()
  statinfo_meta.append_key.unwrap()
  statinfo_meta.dot_provider_key.unwrap()
  statinfo_meta.sequence_constructor_key.unwrap()
  statinfo_meta.sequence_element_key.unwrap()
  statinfo_meta.values_key.unwrap()
  ~completes

block:
  use_static
  expr.macro 'both ($(a :: expr_meta.Parsed)) ($(b :: expr_meta.Parsed)): $c':
    statinfo_meta.wrap(c, statinfo_meta.union(statinfo_meta.gather(a), statinfo_meta.gather(b)))
  expr.macro 'either ($(a :: expr_meta.Parsed)) ($(b :: expr_meta.Parsed)): $c':
    statinfo_meta.wrap(c, statinfo_meta.intersect(statinfo_meta.gather(a), statinfo_meta.gather(b)))
  check (both ([]) ([]): [1])[0] ~is 1
  check (either ([]) ([]): [1])[0] ~is 1
  check (both ([]) ([]): "")[0] ~throws "expected: List"

check:
  ~eval
  use_static
  import rhombus/meta open
  expr.macro 'either ($(a :: expr_meta.Parsed)) ($(b :: expr_meta.Parsed)): $c':
    statinfo_meta.wrap(c, statinfo_meta.intersect(statinfo_meta.gather(a), statinfo_meta.gather(b)))
  (either ([]) (""): 0) ++ []
  ~throws "specialization not known"
