#lang rhombus
import: "check.rhm" open

check:
  {"a": 1, keyword(~b): 2}
  Map(["a", 1], [keyword(~b), 2])

check:
  Map.length({"a": 1, "b": 2})
  2

check:
  ~exn
  Map.length({1, 2, 3})
  values("contract violation", "expected: Map")

begin:
  use_static
  check:
    {"a": 1, "b": 2}.length()
    2
  check:
    {"a": 1, "b": 2}["a"]
    1
  check:
    Map{"a": 1, "b": 2}.length()
    2
  check:
    Map(["a", 1], ["b", 2]).length()
    2
  check:
    MutableMap{"a": 1, "b": 2}.length()
    2
  check:
    MutableMap(["a", 1], ["b", 2]).length()
    2
  check:
    def map: {"a": 1, "b": 2}
    map.length()
    2
  check:
    def map :: Map: dynamic({"a": 1, "b": 2})
    map.length()
    2
  check:
    def map -: Map: dynamic({"a": 1, "b": 2})
    map.length()
    2
  check:
    def map :: Map.of(String, Integer): dynamic({"a": 1, "b": 2})
    map.length()
    2

begin:
  check:
    dynamic({"a": 1, "b": 2}).length()
    2
  check:
    dynamic({"a": 1, "b": 2})["a"]
    1

// See also tests in "rest-args.rhm"
begin:
  check:
    {"a": 1, "b": 2, &{"c": 3}}
    {"a": 1, "b": 2, "c": 3}
  check:
    {"a": 1, &{"b": 2, "c": 3}}
    {"a": 1, "b": 2, "c": 3}
  check:
    {&{"b": 2, "c": 3}, "a": 1}
    {"a": 1, "b": 2, "c": 3}
  check:
    {&{"b": 2}, "a": 1, &{"c": 3}}
    {"a": 1, "b": 2, "c": 3}
  check:
    {"c": "oops", "b": "oops", &{"b": 2}, "a": 1, &{"c": 3}}
    {"a": 1, "b": 2, "c": 3}
  check:
    {"b": "oops", &{"b": 2}, "c": "oops", "a": 1, &{"c": 3}}
    {"a": 1, "b": 2, "c": 3}
  check:
    {&{"b": "oops"}, "c": "oops", "b": 2, "a": 1, &{"c": 3}}
    {"a": 1, "b": 2, "c": 3}
  check:
    def mutable x: []
    [{&(begin: x := [1, x]; {"b": 2}), (begin: x:= [2, x]; "a"): 1, &(begin: x:= [3, x]; {"c": 3})},
     x]
    [{"a": 1, "b": 2, "c": 3},
     [3, [2, [1, []]]]]
  check:
    ~exn
    {&"oops"}
    "not a map"
