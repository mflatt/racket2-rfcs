#lang rhombus

begin:
  syntax.class Arithmetic
  | '$x + $y'

  check:
    match '1+2'
    | '$(exp :: Arithmetic)': exp.x
    ~prints_like '1'

  check:
    match '1+2'
    | '$(exp :: Arithmetic)': exp.y
    ~prints_like '2'

  check:
    match '1+2'
    | '$(_ :: Arithmetic: y ~as expy)': expy
    ~prints_like '2'

check:
  ~eval
  syntax.class Arithmetic
  | '$x + $y'
  match '1+2'
  | '$(exp :: Arithmetic)': exp
  ~raises "cannot use repetition binding as an expression"

begin:
  syntax.class Arithmetic
  | '$x + $y'
  | '$x - $y'

  check:
    match '1+2'
    | '$(exp :: Arithmetic)': exp.x
    ~prints_like '1'

  check:
    match '1-2'
    | '$(exp :: Arithmetic)': exp.y
    ~prints_like '2'

begin:
  syntax.class Arithmetic
  | '$x + $y':
      ~attr sum: Syntax.make(Syntax.unwrap(x) + Syntax.unwrap(y))
      ~attr [num, ...]: [x, y]

  check:
    match '1+2'
    | '$(exp :: Arithmetic)': exp.sum
    ~prints_like '3'

  check:
    match '1+2'
    | '$(exp :: Arithmetic)': [exp.num, ...]
    ~prints_like ['1', '2']

begin:
  syntax.class Foo
  | 'a ($x, ...) z'

  check:
    match 'a (1, 2, 3) z'
    | '$(f :: Foo)': [f.x, ...]
    ~prints_like ['1', '2', '3']

  check:
    match '[a (1, 2, 3) z, a () z, a ("x", "y") z]'
    | '[$(f :: Foo), ...]': [[f.x, ...], ...]
    ~prints_like [['1', '2', '3'], [], ['"x"', '"y"']]

  check:
    match 'a (1, 2, 3) z'
    | '$(whole :: Foo: x ~as f)': [f, ...]
    ~prints_like ['1', '2', '3']

begin:
  syntax.class Foo
  | 'a $x ...'

  check:
    match 'a (1, 2, 3) z'
    | '$(f :: Foo)': [f.x, ...]
    ~prints_like ['(1, 2, 3)', 'z']

// check that right-hand side of pattern
// is in a more nested scope than pattern variables
begin:
  syntax.class Foo
  | 'a $x':
      def x = "whatever"
  check:
    match 'a 1'
    | '$(f :: Foo)': f.x
    ~prints_like '1'

// check that syntax class description appears in match error
begin:
  check:
    ~eval
    import:
      rhombus/meta open
    meta:
      syntax.class Arithmetic:
        description: "an expression with addition or subtraction"
        pattern
        | '$x + $y'
        | '$x - $y'
    expr.macro 'right_operand $(e :: Arithmetic)':
      values(e.y, '')
    right_operand 1 +
    ~raises "expression with addition or subtraction"

begin:
  syntax.class Foo
  | '$x + $y'
  | '$x + $y + $z'
  check:
    match '1 + 2'
    | '$(f :: Foo)': [f.x, f.y]
    ~prints_like ['1', '2']
  check:
    match '10 + 20 + 30'
    | '$(f :: Foo)': [f.x, f.y]
    ~prints_like ['10', '20']

check:
  ~eval
  import:
    rhombus/meta open
  syntax.class Foo
  | '$x + $y'
  | '$x + $y + $z'
  match '10 + 20 + 30'
  | '$(f :: Foo)': f.z
  ~raises "attribute not found"

begin:
  syntax.class Foo:
    kind: ~sequence
    pattern
    | '$x + $y'
  check:
    match '0 + 1 + 2'
    | '0 + $(f :: Foo)': [f.x, f.y]
    ~prints_like ['1', '2']

begin:
  syntax.class Foo:
    kind: ~term
    pattern
    | '($x + $y)'
  check:
    match '0 + (1 + 2)'
    | '0 + $(f :: Foo)': [f.x, f.y]
    ~prints_like ['1', '2']

check:
  ~eval
  syntax.class Foo:
    kind: ~term
    pattern
    | '$x + $y'
  ~raises "not a single-term pattern"

begin:
  syntax.class Foo:
    kind: ~group
    pattern
    | '$x + $y'
  check:
    match '(1 + 2)'
    | '($(f :: Foo))': [f.x, f.y]
    ~prints_like ['1', '2']

begin:
  syntax.class Foo:
    kind: ~group
    pattern
    | '$g'
  check:
    match '(1 + 2)'
    | '($(f :: Foo))': f.g
    ~prints_like '1 + 2'

begin:
  check:
    ~eval
    syntax.class Foo:
      kind: ~group
      pattern
      | '$x + $y'
    match '0 + 1 + 2'
    | '0 + $(f :: Foo)': [f.x, f.y]
    ~raises "syntax class incompatible with this context"

begin:
  syntax.class Foo:
    kind: ~multi
    pattern
    | '$x + $y
       $z - $w'
  check:
    match ': 1 + 2
             3 - 4'
    | ': $(f :: Foo)': [f.x, f.y, f.z, f.w, f]
    ~prints_like ['1', '2', '3', '4', '1 + 2; 3 - 4']
  check:
    match '(1 + 2,
            3 - 4)'
    | '($(f :: Foo))': [f.x, f.y, f.z, f.w, f]
    ~prints_like ['1', '2', '3', '4', '1 + 2; 3 - 4']

begin:
  syntax.class Foo:
    kind: ~block
    pattern
    | ': $x + $y
         $z - $w'
  check:
    match ': 1 + 2
             3 - 4'
    | ': $(f :: Foo)': [f.x, f.y, f.z, f.w, f]
    ~prints_like ['1', '2', '3', '4', ': 1 + 2; 3 - 4']

check:
  ~eval
  syntax.class Foo:
    kind: ~block
    pattern
    | '($x + $y,
        $z - $w)'
  ~raises "not a block pattern"

begin:
  syntax.class Foo:
    kind: ~multi
    pattern
    | '($x, $y)'
  check:
    match '((1 + 2, 3 - 4))'
    | '($(f :: Foo))': f
    ~prints_like '(1 + 2, 3 - 4)'
  check:
    match '(1 + 2, 3 - 4)'
    | '($(f :: Foo))': f
    | ~else: "no"
    ~is "no"
  check:
    match '(1 + 2, 3 - 4)'
    | '$(f :: Foo)': f
    | ~else: "no"
    ~prints_like '(1 + 2, 3 - 4)'

begin:
  syntax.class Foo:
    kind: ~multi
    pattern
    | '$x'
  check:
    match '(1 + 2, 3 - 4)'
    | '($(f :: Foo))': f
    ~prints_like '1 + 2; 3 - 4'
  check:
    match ': 1 + 2; 3 - 4; 5 / 6'
    | ': $(f :: Foo)': f
    ~prints_like '1 + 2; 3 - 4; 5 / 6'

check:
  syntax.class Option:
    kind: ~term
    pattern
    | '~lang':
        ~attr form: '~lang'
  match '(~lang, ~lang)'
  | '($(o :: Option), ...)': [o.form, ...]
  ~prints_like ['~lang', '~lang']

check:
  syntax.class Option:
    pattern
    | '~lang':
        ~attr form: '~lang'
    | '~lang ~and':
        ~attr form: '~and'
  match '(~lang, ~lang ~and)'
  | '($(o :: Option), ...)': [o.form, ...]
  ~prints_like ['~lang', '~and']

check:
  ~eval
  syntax.class Option:
    kind: ~term
    pattern
    | '~lang':
        ~attr form: '~lang'
  match '(~lang, ~lang)'
  | '($(o :: Option), ...)': [o.form]
  ~raises "attribute is a repetition"

check:
  ~eval
  syntax.class Option:
    pattern
    | '~lang':
        ~attr form: '~lang'
  match '(~lang, ~lang)'
  | '($(o :: Option), ...)': [o.form]
  ~raises "attribute is a repetition"

begin:
  syntax.class NTerms
  | '~one $a':
      ~attr b:
        '0'
      ~attr c:
        '0'
      def sum:
        Syntax.unwrap(a) + Syntax.unwrap(b) + Syntax.unwrap(c)
      ~attr average:
        '$(sum / 2)'
  | '~two $a $b':
      ~attr c:
        '0'
      def sum:
        Syntax.unwrap(a) + Syntax.unwrap(b) + Syntax.unwrap(c)
      ~attr average:
        '$(sum / 2)'
  | '~three $a $b $c':
      def sum:
        Syntax.unwrap(a) + Syntax.unwrap(b) + Syntax.unwrap(c)
      ~attr average:
        '$(sum / 2)'

  def '$(two_terms :: NTerms)' = '~two 24 42'
  check:
    two_terms.a
    ~prints_like '24'
  check:
    two_terms.c
    ~prints_like '0'
  check:
    two_terms.average
    ~prints_like '33'

// check that dotted syntax-class names work
begin:
  namespace N:
    export Arithmetic
    syntax.class Arithmetic
    | '$x + $y'

  check:
    match '1+2'
    | '$(exp :: N.Arithmetic)': exp.x
    ~prints_like '1'

  check:
    match '1+2'
    | '$(exp :: N.Arithmetic)': exp.y
    ~prints_like '2'

// empty pattern is a special case
begin:
  syntax.class Maybe:
    pattern
    | '1'
    | ''

  check:
    def '$(x :: Maybe) 2' = '2'
    [x, ...]
    ~is []

  check:
    def '$(x :: Maybe) 2' = '1 2'
    [x, ...]
    ~prints_like ['1']

begin:
  syntax.class House(material)
  | '< < > >':
      ~attr stuff: Syntax.make(material +& "!")
  check:
    def '$(x :: House("straw"))' = '< < > >'
    x.stuff
    ~prints_like '"straw!"'

check:
  ~eval
  syntax.class House(material) | '< < > >'
  def '$(x :: House)' = #false
  ~raises "syntax class expects arguments"

check:
  ~eval
  syntax.class Horse | '!!!'
  def '$(x :: Horse(1))' = #false
  ~raises "syntax class does not expect arguments"
