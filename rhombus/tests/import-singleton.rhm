#lang rhombus/and_meta

namespace n:
  export: exint
  def exint = 10
  bind.macro 'exint': '(_ :: Integer)'
  annot.macro 'exint': 'Integer'

check:
  ~eval
  begin:
    namespace n:
      export: exint
      def exint = 10  
    import: .n.exint meta
  ~raises "phase shifting not supported with a dotted module path"

check:
  ~eval
  begin:
    namespace n:
      export: exint
      def exint = 10  
    import: .n.exint:
              except: exint
  ~raises "identifier to exclude is not included"

check:
  import: .n.exint
  def exint = 10
  10 :: exint
  exint
  ~is 10

check:
  import: lib("rhombus/tests/example-c.rhm").exint
  def exint = 10
  10 :: exint
  exint
  ~is 10

check:
  import: .n.exint
  def exint = "10"
  ~raises "value does not satisfy annotation"

check:
  import: .n.exint
  "10" :: exint
  ~raises "value does not satisfy annotation"

check:
  import: .n.exint as ex_int
  def ex_int = 10
  10 :: ex_int
  ex_int
  ~is 10

check:
  import:
    .n.exint:
      only_space: expr
  exint
  ~is 10

check:
  import:
    .n.exint as ex_int:
      only_space: expr
  ex_int
  ~is 10

check:
  ~eval
  begin:
    import rhombus/meta open
    namespace n:
      export: exint
      def exint = 10
      bind.macro 'exint': '(_ :: Integer)'
      annot.macro 'exint': 'Integer'
    import:
      .n.exint:
        only_space: expr
    10 :: exint
  ~raises "not bound as an annotation"

check:
  import:
    .n.exint:
      only_space: annot
  def exint = 11
  exint
  ~is 11

check:
  import:
    .n.exint:
      only_space: annot
  11 :: exint
  ~is 11

check:
  import:
    .n.exint as ex_int:
      only_space: annot
  11 :: ex_int
  ~is 11
