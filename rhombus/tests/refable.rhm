#lang rhombus

use_static

class O(v):
  nonfinal

class A():
  nonfinal
  implements Refable
  override method ref(index) :: O:
    O(index)
  method ref_self(index):
    this[index].v

class B():
  nonfinal
  extends A
  implements MutableRefable
  field saved = #false
  override method set(index, val):
    saved := [index, val]
    #void

class C():
  extends B

class A2():
  implements MutableRefable
  field saved = #false
  override method ref(index) :: O:
    O(index)
  override method set(index, val):
    saved := [index, val]
    if index == "bad"
    | "bad"
    | #void

interface I3:
  extends MutableRefable
  
class A3():
  implements I3
  field saved = #false
  override method ref(index) :: O:
    O(index)
  override method set(index, val):
    saved := [index, val]
    if index == "bad"
    | "bad"
    | #void  

check:
  A()[0].v ~is 0
  A().ref_self(7) ~is 7
  B()[2].v ~is 2
  C()[4].v ~is 4
  A2()[3].v ~is 3
  A2()["good"] := #'ok ~is #void
  A2()["bad"] := #'no ~raises "result does not satisfy annotation"
  A3()[0].v ~is 0
  (A3() :: I3)[0] ~is O(0)

block:
  def b = B()  
  check:
    b[0] := 1 ~is #void
    b.saved ~is [0, 1]

block:
  def c = C()  
  check:
    c[0] := 1 ~is #void
    c.saved ~is [0, 1]
