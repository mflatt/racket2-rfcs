#lang rhombus

fun check_later():
  ok_later

let accum: 1
let accum: accum+1
let accum: accum+1
check:
  accum
  ~is 3

def ok_later = "ok"
def c_later = check_later()

check:
  c_later
  ~is "ok"
check:
  check_later()
  ~is "ok"

// check scope pruning in `let`
check:
  import:
    meta -1:
      rhombus/meta.syntax_meta
  let (id1, id2):
    let id1 = Syntax.literal 'id'
    values(id1, Syntax.literal 'id')
  let id3 = Syntax.literal 'id'
  syntax_meta.equal_name_and_scopes(id1, id2)
    && syntax_meta.equal_name_and_scopes(id1, id3)
    && syntax_meta.equal_name_and_scopes(id2, id3)
  ~is #true

check:
  def x = 1
  block:
    def y = x
    let x = 2
    y
  ~is 1

check:
  let x = 1
  block:
    def y = x
    let x = 2
    y
  ~is 1

check:
  let x = 1
  block:
    let x = 2
    def y = x
    y
  ~is 2

check:
  ~eval
  block:
    def x = 1
    let x = 2
    "ok"
  ~raises "duplicate definition"

check:
  ~eval
  block:
    let x = 2
    def x = 1
    "ok"
  ~raises "duplicate definition"

check:
  ~eval
  block:
    let x = 2
    let y = 2
    def x = 1
    "ok"
  ~raises "duplicate definition"

check:
  ~eval
  import rhombus/meta open
  block:
    def x = "outer"
    defn.macro 'm $id':
      'let $id = "inner"
       x'
    m x
  ~raises "duplicate definition"
  
check:
  ~eval
  block:
    let x = 2
    import rhombus.List as x
    "ok"
  ~raises "duplicate import"

check:
  ~eval
  block:
    let x = 2
    import rhombus as x
    "ok"
  ~raises "duplicate import"

check:
  ~eval
  block:
    let x = 2
    import rhombus/meta open
    defn.macro 'm $id':
      'import rhombus as $id'
    m x
  ~raises "duplicate import"
