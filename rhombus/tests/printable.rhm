#lang rhombus/static

check to_string("apple") ~is "apple"
check to_string("apple", ~mode: #'expr) ~is "\"apple\""

check:
  class Posn(x, y):
    implements Printable
    override describe(mode, recur):
      "_" +& x +& "," +& y +& "_"
  "" +& Posn(1, 2)
  ~is "_1,2_"

block:
  class Posn(x, y):
    implements Printable
    override describe(mode, recur):
      import: .PrintDesc open
      concat("(", align(concat(recur(x, mode), ",", newline(),
                               recur(y), ")")))
  check "" +& Posn(1, 2) ~is "(1,\n 2)"
  check "" +& Posn("a", "b") ~is "(a,\n \"b\")"
  check to_string(Posn("a", "b"), ~mode: #'expr) ~is "(\"a\",\n \"b\")"
  check "" +& Posn(Posn(1, 2), Posn(3, 4)) ~is "((1,\n  2),\n (3,\n  4))"

block:
  class Posn(x, y):
    implements Printable
    override describe(mode, recur):
      PrintDesc.list("(", [recur(x, mode), recur(y)], ")")
  check "" +& Posn(1, 2) ~is "(1, 2)"

block:
  class Posn(x, y):
    implements Printable
    override describe(mode, recur):
      import .PrintDesc open
      // using newline() forces multi-line rendering of `Posn`
      list("(", [concat(recur(x, mode), newline(), "!"), recur(y)], ")")      
  check "" +& Posn(1, 2) ~is "(1\n !,\n 2)"

check:
  class Posn(x, y):
    private implements Printable
    private override describe(mode, recur):
      "_" +& x +& "," +& y +& "_"
  "" +& Posn(1, 2)
  ~is "_1,2_"

block:
  class Box(tag, mutable val):
    implements Printable
    override describe(mode, recur):
      PrintDesc.list("Box(", [recur(tag), recur(val)], ")")
  check to_string(Box(1, #false)) ~is "Box(1, #false)"
  block:
    def b = Box(3, #false)
    check to_string([b, b]) ~is "[Box(3, #false), Box(3, #false)]"
    check to_string({1: b, 2: b}) ~is "{1: Box(3, #false), 2: Box(3, #false)}"
    parameterize { Printable.current_show_graph: #true }:
      check to_string([b, b]) ~is "[#0=Box(3, #false), #0#]"
      check to_string({1: b, 2: b}) ~is "{1: #0=Box(3, #false), 2: #0#}"
  block:
    def b = Box(2, #false)
    b.val := b
    check to_string(b) ~is "#0=Box(2, #0#)"
