#lang rhombus/static

block:
  import "static_arity.rhm"
  static_arity.check:
    Equatable.hash(v)
    Equatable.identity_hash(v)
    Equatable.hash_code_combine(hc, ...)
    Equatable.hash_code_combine_unordered(hc, ...)

class AnythingGoes():
  private implements Equatable
  private override equals(other, recur): #true
  private override hash_code(recur): 0

class NoGo():
  private implements Equatable
  private override equals(other, recur): #false
  private override hash_code(recur): 1

class Fail():
  private implements Equatable
  private override equals(other, recur): error("failure")
  private override hash_code(recur): 2

class Broken():
  implements Equatable
  override equals(other, recur): values("oops", "wow")
  override hash_code(recur): "oops"

check AnythingGoes() == AnythingGoes() ~is #true
check:
  use_dynamic
  AnythingGoes().equals(AnythingGoes(), fun (& _): #true)
  ~throws "equals: no such field or method"
check:
  use_dynamic
  AnythingGoes().hash_code(fun (_): 0)
  ~throws "hash_code: no such field or method"

check AnythingGoes() == NoGo() ~is #false
check NoGo() == AnythingGoes()  ~is #false

check NoGo() == NoGo() ~is #false
block:
  def ng = NoGo()
  check ng == ng ~is #true

check AnythingGoes() == Fail() ~is #false
check Fail() == AnythingGoes() ~is #false
check NoGo() == Fail() ~is #false
check Fail() == NoGo() ~is #false
check Fail() == Fail() ~throws "failure"
block:
  def f = Fail()
  check f == f ~is #true

check AnythingGoes() == Broken() ~is #false
check Broken() == AnythingGoes() ~is #false
check NoGo() == Broken() ~is #false
check Broken() == NoGo() ~is #false
check Broken() == Broken() ~throws values(
  "results do not satisfy annotation",
  "Any",
  "\"oops\"", "\"wow\"",
)
block:
  def f = Broken()
  check f == f ~is #true

check Equatable.hash(AnythingGoes()) ~is 0
check Equatable.hash(NoGo()) ~is 1
check Equatable.hash(Fail()) ~is 2
check Equatable.hash(Broken()) ~throws values(
  "result does not satisfy annotation",
  "Int",
  "\"oops\"",
)

check Broken().equals(Broken(), fun (a, b): a == b) ~throws values(
  "results do not satisfy annotation",
  "Any",
  "\"oops\"", "\"wow\"",
)
check Broken().hash_code(Equatable.hash) ~throws values(
  "result does not satisfy annotation",
  "Int",
  "\"oops\"",
)

block:
  class AnythingGoesAbstract():
    nonfinal
    implements Equatable
    abstract m()

  class AnythingGoesConcrete(n):
    extends AnythingGoesAbstract
    override equals(other, recur): #true
    override hash_code(recur): 3
    override method m(): "ok"

  check AnythingGoesConcrete(0) == AnythingGoesConcrete(1) ~is #true
  check Equatable.hash(AnythingGoesConcrete(2)) ~is 3

  // check for static info on `hash_code` result
  check AnythingGoesConcrete(2).hash_code(values) compares_equal AnythingGoesConcrete(2).hash_code(values) ~is #true

block:
  class AnythingGoesAbstract():
    nonfinal
    private implements Equatable
    private override equals(other, recur): #true
    private override hash_code(recur): 4
    abstract m()

  class AnythingGoesConcrete(n):
    extends AnythingGoesAbstract
    override method m(): "ok"

  check AnythingGoesConcrete(0) == AnythingGoesConcrete(1) ~is #true
  check Equatable.hash(AnythingGoesConcrete(2)) ~is 4

  // check for static info on `hash` result
  check Equatable.hash(AnythingGoesConcrete(2)) compares_equal Equatable.hash(AnythingGoesConcrete(2)) ~is #true
