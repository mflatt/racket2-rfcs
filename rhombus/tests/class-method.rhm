#lang rhombus

use_static

check:
  ~eval
  class Posn(x, y):
    method x(): 0
    method x(): 1
  ~raises "duplicate method name"

check:
  ~eval
  class Posn(x, y):
    method x(): 0
    abstract x
  ~raises "duplicate method name"

check:
  ~eval
  class Posn(x, y):
    method x(): 0
  ~raises "identifier used as both a field name and method name"

check:
  ~eval
  class Posn(x, y):
    private method x(): 0
  ~raises "identifier used as both a field name and method name"

check:
  ~eval
  class Posn(x, y):
    field q: 1
    method q(): 0
  ~raises "identifier used as both a field name and method name"

check:
  ~eval
  class Posn(x, y):
    private field q: 1
    method q(): 0
  ~raises "identifier used as both a field name and method name"

check:
  ~eval
  class Posn(x, y):
    nonfinal
  class Posn3D(z):
    extends Posn
    method x(): 0
  ~raises "identifier used as both a field name and method name"    

check:
  ~eval
  class Posn(x, y):
    nonfinal
  class Posn3D(z):
    extends Posn
    private method x(): 0
  ~raises "identifier used as both a field name and method name"    

check:
  ~eval
  class Posn(x, y):
    nonfinal
    field q: 1
  class Posn3D(z):
    extends Posn
    method q(): 0
  ~raises "identifier used as both a field name and method name"    

check:
  ~eval
  class Posn(x, y):
    nonfinal
    method z(): 0
  class Posn3D(z):
    extends Posn
  ~raises "identifier used as both a field name and method name"    

check:
  ~eval
  class Posn(x, y):
    nonfinal
    method q(): 0
  class Posn3D(z):
    extends Posn
    field q: 1
  ~raises "identifier used as both a field name and method name"    

check:
  ~eval
  class Posn(x, y):
    nonfinal
    method q(): 0
  class Posn3D(z):
    extends Posn
    private field q: 1
  ~raises "identifier used as both a field name and method name"    

check:
  ~eval
  class Posn(x, y):
    nonfinal
    method m(): 0
  class Posn3D(z):
    extends Posn
    method m(): 0
  ~raises "method is already in superclass"

check:
  ~eval
  class Posn(x, y):
    nonfinal
  class Posn3D(z):
    extends Posn
    override m(): 0
  ~raises "method is not in superclass"

check:
  ~eval
  class Posn(x, y):
    nonfinal
    final method m(): 0
  class Posn3D(z):
    extends Posn
    override m(): 0
  ~raises "cannot override superclass's final method"

check:
  ~eval
  class Posn(x, y):
    abstract m
  ~raises "final class cannot have abstract methods"

check:
  class Posn(x, y):
    nonfinal
    abstract m
  Posn is_a List
  ~is #false

check:
  ~eval
  class Posn(x, y):
    nonfinal
    abstract m
  Posn(1, 2)
  ~raises "cannot instantiate class with abstract"

check:
  ~eval
  class Posn(x, y):
    nonfinal
    abstract m
  class Posn3D(z):
    extends Posn
    nonfinal
  Posn3D(1, 2, 3)
  ~raises "cannot instantiate class with abstract"

check:
  class Posn(x, y):
    method m0(): [y, x]
    method m1(z): [y, x, z]
    method m2(z): m1(-z)
  def p = Posn(1, 2)
  [p.m0(),
   p.m1(3),
   p.m2(3)]
  ~is [[2, 1],
       [2, 1, 3],
       [2, 1, -3]]

check:
  class Posn(x, y):
    nonfinal
    method m0(): [y, x]
    method m1(z): [y, x, z]
    method m2(z): m1(-z)
  class Posn3D(z):
    extends Posn
    override m1(w): [y, x, z, w]
    method m3(a, b, c): [a, m0(), m1(5), m2(6)]
    method m4(x): x
  def p = Posn(1, 2)
  def p3 = Posn3D(1, 2, 3)
  [p.m0(), p.m1(3), p.m2(3),
   p3.m0(),
   p3.m1(4),
   p3.m2(4),
   p3.m3(10, 11, 12),
   p3.m4("x")]
  ~is [[2, 1], [2, 1, 3], [2, 1, -3],
       [2, 1],
       [2, 1, 3, 4],
       [2, 1, 3, -4],
       [10, [2, 1], [2, 1, 3, 5], [2, 1, 3, -6]],
       "x"]

check:
  ~eval
  use_static
  begin:
    class Posn(x, y):
      method m0(): [y, x]
    def p = Posn(1, 2)
    p.m0
  ~raises "method must be called for static mode"

check:
  ~eval
  use_static
  begin:
    class Posn(x, y):
      method m0(): m0
    "ok"
  ~raises "method must be called"

check:
  use_dynamic
  class Posn(x, y):
    method m0(): [y, x]
  def p = Posn(1, 2)
  [dynamic(p).x,
   dynamic(p).m0 +& "",
   dynamic(p).m0()]
  ~is [1,
       "#<function:m0>",
       [2, 1]]

check:
  class Posn(x, y):
    private field q = 1
    method m0(): [q, this.q]
  def p = Posn(1, 2)
  [p.m0()]
  ~is [[1, 1]]

check:
  ~eval
  use_static
  class Posn(x, y):
    private field q = 1
  (Posn(1, 2)).q
  ~raises "no such public field or method"

check:
  ~eval
  use_static
  class Posn(x, y):
    private field q: 1
  Posn.q
  ~raises "identifier not provided"

check:
  use_dynamic
  class Posn(x, y):
    private field q: 1
  (Posn(1, 2)).q
  ~raises "no such field"

check:
  use_static
  class Posn(x, y):
    nonfinal
    method m() :: Posn: Posn(1, 2)
  Posn.m(Posn(1, 2)).x
  ~is 1

check:
  class Posn(x, y):
    nonfinal
    private field q: 1
    method lookup(p -: Posn): p.q
  class Posn3D(z):
    extends Posn
    private field q: "other"
    method get(): q
  def p = Posn3D(0, 2, 3)
  [p.lookup(p), p.get()]
  ~is [1, "other"]

check:
  ~eval
  use_static
  begin:
    class Posn(x, y):
      nonfinal
      private field q: 1
      method lookup(p :: Posn3D):
        p.q
    class Posn3D(z):
      extends Posn
    "ok"
  ~raises "no such public field or method"

check:
  class Posn(x, y):
    private field q: 1
    method get():
      class Helper():
        private field q: 1000
        method get(p :: Posn): [p.q, q]
      Helper().get(this)
  Posn(0, 10).get()
  ~is [1, 1000]

check:
  class Posn(x, y):
    nonfinal
    abstract m
  class Posn3D(z):
    extends Posn
    override m(): "ok"
  Posn3D(1, 2, 3).m()
  ~is "ok"

check:
  class Posn(x, y):
    nonfinal
    method a(): 1
    method b(): 2
    method c(): 3
  class Posn3D(z):
    extends Posn
    nonfinal
    override a(): [super.a()]
    override c(): [super.b()]
  def p = Posn3D(1, 2, 3)
  [p.a(), p.b(), p.c(),
   Posn.a(p), Posn.b(p), Posn.c(p)]
  ~is [[1], 2, [2],
       [1], 2, [2]]

check:
  ~eval
  class Posn(x, y):
    nonfinal
    abstract m
  class Posn3D(z):
    extends Posn
    override m(): super.m()
  ~raises "method is abstract in superclass"

check:
  class Posn(x, y):
    nonfinal
    method a(): 1
    method b(): 2
    method c(): 3
  class Posn3D(z):
    extends Posn
    override a(): [super.a()]
    override c(): [super.b()]
  def p = Posn3D(1, 2, 3)
  [Posn.a(p), Posn.b(p), Posn.c(p),
   Posn3D.a(p), Posn3D.b(p), Posn3D.c(p)]
  ~is [[1], 2, [2],
       [1], 2, [2]]

check:
  class Posn(x, y):
    method a(): 1
  Posn.a is_a Integer
  ~is #false

check:
  class Posn(x, y):
    method a(): 1
  Posn.a(0)
  ~raises "not an instance"

check:
  class A():
    nonfinal
    method m():
      5
  class B():
    extends A
    nonfinal
    abstract override m()
  class C():
    extends B
    override m():
      6
  C().m()
  ~is 6

check:
  ~eval
  class A():
    nonfinal
    method m():
      5
  class B():
    extends A
    nonfinal
    abstract override m()
  class C():
    extends B
  ~raises "final class cannot have abstract methods"

check:
  ~eval
  class A():
    nonfinal
    method m():
      5
  class B():
    extends A
    abstract override m()
  ~raises "final class cannot have abstract methods"
