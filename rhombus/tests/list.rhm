#lang rhombus

begin:
  import "static_arity.rhm"
  static_arity.check:
    List(l, ...)
    List.length(lst)
    List.cons(a, d)

check:
  List.length([1, 2, 3])
  ~is 3

check:
  List.length({1, 2, 3})
  ~raises values("contract violation", "expected: List")

check:
  [1] :: NonemptyList
  ~is [1]

check:
  [] :: NonemptyList
  ~raises "does not satisfy annotation"

begin:
  use_static
  check:
    [1, 2, 3].length()
    ~is 3
  check:
    [1, 2, 3][0]
    ~is 1
  check:
    [1, 2, 3].first
    ~is 1
  check:
    [1, 2, 3].rest
    ~is [2, 3]
  check:
    List(1, 2, 3).length()
    ~is 3
  check:
    def lst = [1, 2, 3]
    lst.length()
    ~is 3
  check:
    def lst :: List = dynamic([1, 2, 3])
    lst.length()
    ~is 3
  check:
    def lst -: List = dynamic([1, 2, 3])
    lst.length()
    ~is 3
  check:
    def lst :: List.of(Integer) = dynamic([1, 2, 3])
    lst.length()
    ~is 3
  check:
    def [v, ...] = dynamic([1, 2, 3])
    [v, ...].length()
    ~is 3
  check:
    def lst :: List.of(List) = dynamic([[1, 2, 3]])
    lst.first.length()
    ~is 3
  check:
    def lst :: List.of(Integer) = dynamic([1, 2, 3])
    lst.rest.length()
    ~is 2
  check:
    def lst :: NonemptyList.of(List) = dynamic([[1, 2, 3]])
    lst.first.length()
    ~is 3
  check:
    List.cons(1, [2, 3])
    ~is [1, 2, 3]
  check:
    List.cons(1, [2, 3]).length()
    ~is 3

begin:
  check:
    dynamic([1, 2, 3]).length()
    ~is 3
  check:
    dynamic([1, 2, 3]).first
    ~is 1
  check:
    dynamic([1, 2, 3]).rest
    ~is [2, 3]
  check:
    dynamic([1, 2, 3])[0]
    ~is 1
