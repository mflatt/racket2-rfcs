#lang rhombus/static
import:
  lib("racket/base.rkt") as rkt
  rhombus/cmdline:
    expose:
      flag
      multi

fun file_to_mod_path(str :: String):
  match str.split("!")
  | [base, submod, ...]:
      all(submod.length() != 0, ...)
        && ModulePath.try('file($base) $(List.append(['!', Symbol.from_string(submod)], ...))')
  | ~else: #false

def args :~ Map:
  cmdline.parse:
    multi:
      flag "-l" (mod_path :: cmdline.ModulePath):
        ~alias "--lib"
        ~help (@str{Loads the collection-based module <mod_path>
                   Use `!` at end to refer to a submodule.})
        ~accum accum
        accum ++ { #'lib: (accum.get(#'lib, []) :~ List) ++ [mod_path],
                   #'eval: #true }
      flag "-f" path:
        ~alias "--file"
        ~help (@str{Loads the module <path>.
                     Use `!` at end to refer to a submodule.})
        ~accum accum
        let mod_path = file_to_mod_path(path)
        unless mod_path
        | error(~who: to_string(cmdline.current_program()),
                "expected a module path",
                error.text(~label: "given", path),
                error.text(~label: "for flag", cmdline.current_flag_string()))
        accum ++ { #'lib: (accum.get(#'lib, []) :~ List) ++ [mod_path],
                   #'eval: #true }
      flag "-t" (path :: cmdline.Path):
        ~alias "--require"
        ~help (@str{Loads the module <path> exactly, without treating
                    `!` as a submodule separator.})
        ~accum accum
        accum ++ { #'lib: (accum.get(#'lib, []) :~ List) ++ [ModulePath('file($(to_string(path)))')],
                   #'eval: #true }
    flag "-i":
      ~alias "--repl"
      ~key: #'repl
      ~help: "Run a read-eval-print-loop."
    flag "-u":
      ~alias "--no-make"
      ~key: #'no_make
      ~help: "Disable automatic compilation of modules."
    flag "-v":
      ~alias "--version"
      ~help: "Show version."
      ~accum accum
      accum ++ { #'version: #true, #'eval: #true }
    cmdline.args arg ...:
      ~accum accum
      let args = [arg, ...]
      if !accum.get(#'eval, #false) && (args.length() != 0)
      | let mp = file_to_mod_path(args.first)
        unless mp
        | error(~who: to_string(cmdline.current_program()),
                "expected a module path as first argument",
                error.text(~label: "given", args.first))
        accum ++ { #'lib: [mp], #'args: args.rest, #'eval: #true }
      | accum ++ { #'args: [arg, ...] }

cmdline.current_command_line(args[#'args])

when args.get(#'version, #false) || !args.get(#'eval, #false)
| println(@str{Welcome to Rhombus v@(system.version())})

when args.get(#'eval, #false) && !args.get(#'no_make, #false)
| let make:
    rkt.#{dynamic-require}(ModulePath('lib("compiler/private/cm-minimal.rkt")').s_exp(),
                           #'#{make-compilation-manager-load/use-compiled-handler})
  rkt.#{current-load/use-compiled}(make())

for (mp :~ ModulePath: args.get(#'lib, []) :~ List):
  Evaluator.import(mp)

when args.get(#'repl, #false) || !args.get(#'eval, #false)
| when !args.get(#'eval, #false)
  | Evaluator.import(ModulePath 'rhombus')
  Evaluator.import(ModulePath 'lib("racket/interactive.rkt")')
  rkt.#{read-eval-print-loop}()
