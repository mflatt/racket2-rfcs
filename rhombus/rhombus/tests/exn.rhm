#lang rhombus

block:
  import "static_arity.rhm"
  static_arity.check:
    error(msg, clause, ...)

block:
  use_static
  def v:
    try:
      parameterize { Evaluator.current: Evaluator.make_rhombus() }:
        eval('fun')
      ~catch x:
        x
  check:
    (v :: Exn.Fail.Syntax).exprs[0].unwrap()
    ~matches ['fun']
  check:
    def e :: Exn.Fail.Syntax = v
    e.exprs[0].unwrap()
    ~matches ['fun']
  check:
    Exn.Fail.Syntax.exprs(v)[0].unwrap()
    ~matches ['fun']
  check:
    use_dynamic
    v.exprs[0].unwrap()
    ~matches ['fun']

  check:
    def v = Exn.Fail.Read("hi", Continuation.Marks.current(), PairList[Srcloc(1, 2, 3, 4, 5)])
    match v
    | Exn.Fail.Read(a, b, srcs): srcs[0].line
    ~is 2
  check:
    String.substring((v :: Exn).message, 0, 24) ~is "fun: expected more terms"
    String.substring(Exn.message(v), 0, 24) ~is "fun: expected more terms"
  block:
    use_dynamic
    check:
      String.substring(v.message, 0, 24) ~is "fun: expected more terms"

block:
  use_static
  class ExExn(index):
    extends Exn.Fail.Syntax
  def v = ExExn("oops", Continuation.Marks.current(), PairList['bad'], 75)
  check:
    v.message ~is "oops"
    v.index ~is 75
    v is_a Exn ~is #true

check:
  error(~who: #'example, "~a oops")
  ~throws "~a oops"

block:
  check:
    error(~who: "who-str", "message")
    ~throws values("who-str: ", "message")
  check:
    error(~who: #'who_sym, "message")
    ~throws values("who_sym: ", "message")
  check:
    error(~who: Syntax.make(#'who_id), "message")
    ~throws values("who_id: ", "message")
  check:
    error(~who: Syntax.make_op(#'who_op), "message")
    ~throws values("who_op: ", "message")
