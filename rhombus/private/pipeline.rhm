#lang rhombus/private/core
import:
  "core-meta.rkt" open

use_static

export:
  |>

expr.macro '$arg |> $tail ...':
  ~op_stx: self
  ~weaker_than: ~other
  // Convert to a dynamic or static call:
  let call:
    if statinfo_meta.is_static(self)
    | statinfo_meta.static_call_name
    | statinfo_meta.dynamic_call_name
  // Parse function as entry point, if possible, to supply static info of `arg`
  let arg_si = statinfo_meta.pack(statinfo_meta.gather(arg))
  let (func, tail):
    match '$tail ...'
    | '$(func :: immediate_callee_meta.Parsed([arg_si], #'infix, self))':
        values(func, '$func.tail ...')
    | '$(func :: expr_meta.AfterInfixParsed(self))':
        values(func, '$func.tail ...')
  // The expansion:
  let expr:
    'block:
       let arg = $arg
       $func $call (arg)'
  // Propagate static information, if any, for the call result:
  let ress = statinfo_meta.lookup(func, statinfo_meta.call_result_key)
  let ress: if ress | statinfo_meta.unpack_call_result(ress) | []
  let [_, unpacked_res]:
    ress.find(fun ([mask, unpacked_info]): mask bits.and 2)
      || [-1, '()']
  values(statinfo_meta.wrap(expr, unpacked_res),
         tail)
