#lang rhombus/private/core
import:
  "core-meta.rkt" open

export:
  where

expr.macro
| 'where':
    ~op_stx self
    syntax_meta.error("misuse as an expression", self)
| '$left where':
    ~op_stx self
    syntax_meta.error("misuse in an expression", self)

meta:
  syntax_class Bind_Right_Expr:
    kind: ~group
  | '$bind ... = $expr'
  | '$bind ...: $(body :: Block)':
      field expr = 'block $body'

bind.macro
| '$bind_left where:«»':
    bind_left
| '$bind_left where:
     $(bind_right_expr :: Bind_Right_Expr)
     ...':
    def ['$(bind_r :: bind_meta.Parsed)', ...] = ['$bind_right_expr.bind ...', ...]
    bind_meta.pack('(where_infoer,
                     ($bind_left, ($bind_r, $bind_right_expr.expr), ...))')
| '$bind_left where $bind_right ... = $expr ...':
    def '$(bind_r :: bind_meta.Parsed)' = '$bind_right ...'
    bind_meta.pack('(where_infoer,
                     ($bind_left, ($bind_r, $expr ...)))')

bind.infoer 'where_infoer($static_info, ($bind_a, ($bind_b, $b_expr), ...))':
  def a_info: bind_meta.get_info(bind_a, static_info)
  def [b_info, ...]: [bind_meta.get_info(bind_b, '()'), ...]
  def '($a_ann, $a_name, $a_static_info, $a_var_info, $_, $_, $_, $_)':
    bind_meta.unpack_info(a_info)
  def ['($b_ann, $b_name, $b_static_info, $b_var_info, $_, $_, $_, $_)', ...]:
    [bind_meta.unpack_info(b_info), ...]
  def [b_tmp_id, ...] = [Syntax.make_temp_id(b_name), ...]
  def '(($a_var_id, [$a_var_use, ...], $a_statinfo), ...)': a_var_info
  def ['(($b_var_id, [$b_var_use, ...], $b_statinfo), ...)', ...]: [b_var_info, ...]
  def [[b_keep_statinfo, ...], ...]:
    // keep only last b's statinfos, since others are bound early
    def len = [[b_statinfo, ...], ...].length()
    for List:
      each:
        statinfos: [[b_statinfo, ...], ...]
        i: 0..
      if i == len-1
      | statinfos
      | statinfos.map(fun (_): '()')
  def ann: Syntax.unwrap(a_ann) +& " where ...."
  '($ann,
    $a_name,
    $a_static_info,
    (($a_var_id, [$a_var_use, ..., ~no_let], ()), ..., // drop static info, because we bind it manually
     ($b_var_id, [$b_var_use, ..., ~no_let], $b_keep_statinfo), ..., ...),
    where_matcher,
    where_committer,
    where_binder,
    ($a_info, ($b_info, $b_tmp_id, $b_expr), ...))'

bind.matcher 'where_matcher($in_id, ($a_info, ($b_info, $b_tmp_id, $b_expr), ...),
                            $IF, $success, $failure)':
  def '($_, $_, $_, $a_var_info, $a_matcher, $a_committer, $a_binder, $a_data)':
    bind_meta.unpack_info(a_info)
  def '(($a_var_id, $a_var_use, $a_statinfo), ...)': a_var_info
  '«$a_matcher($in_id, $a_data, $IF,
               : $a_committer($in_id, $a_data)
                 $a_binder($in_id, $a_data)
                 statinfo.macro '$a_var_id': '$a_statinfo'
                 ...
                 $(block:
                     fun
                     | loop([], [], []):
                         '$success'
                     | loop([b_info, & b_infos], [b_tmp_id, & b_tmp_ids], [b_expr, & b_exprs]):
                         def '($_, $b_name, $_, $b_var_info, $b_matcher, $b_committer, $b_binder, $b_data)':
                           bind_meta.unpack_info(b_info)
                         def '(($b_var_id, $b_var_use, $b_statinfo), ...)': b_var_info
                         'def $b_tmp_id:
                            let $b_name = $b_expr
                            $b_name
                          $b_matcher($b_tmp_id, $b_data, $IF,
                                     : $(if b_infos != []
                                         | '«$b_committer($b_tmp_id, $b_data)
                                             $b_binder($b_tmp_id, $b_data)
                                             statinfo.macro '$b_var_id': '$b_statinfo'
                                             ...»'
                                         | '')
                                       $(loop(b_infos, b_tmp_ids, b_exprs)),
                                     $failure)'
                     loop([b_info, ...], [b_tmp_id, ...], [b_expr, ...])),
               $failure)»'

bind.committer 'where_committer($in_id, ($a_info, $b, ..., ($b_info, $b_tmp_id, $b_expr)))':
  def '($_, $_, $_, $_, $b_matcher, $b_committer, $b_binder, $b_data)':
    bind_meta.unpack_info(b_info)
  '$b_committer($b_tmp_id, $b_data)'

bind.committer 'where_binder($in_id, ($a_info, $b, ..., ($b_info, $b_tmp_id, $b_expr)))':
  def '($_, $_, $_, $_, $b_matcher, $b_committer, $b_binder, $b_data)':
    bind_meta.unpack_info(b_info)
  '$b_binder($b_tmp_id, $b_data)'
