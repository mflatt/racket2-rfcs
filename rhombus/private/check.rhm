#lang rhombus/private/core
import:
  "core-meta.rkt" open
  "call-capture-exn.rkt" open
  lib("racket/syntax-srcloc.rkt") as srcloc
  lib("racket/base.rkt").#{error-print-source-location}
  lib("rackunit/log.rkt").#{test-log!}

export:
 check

meta:
  syntax.class result_mode
  | '~is'
  | '~is_a'
  | '~prints_like'
  | '~raises'
  | '~matches'
  syntax.class result  
  | '$(mode :: result_mode): $body':
      ~attr [suffix, ...]: []
  | '$(mode :: result_mode) $g ...':
      ~attr body: '$g ...'
      ~attr [suffix, ...]: []
  | '~completes':
      ~attr [mode, ...]: ['~completes']
      ~attr body: '#void'
      ~attr [suffix, ...]: ['#void']

expr.macro '«located '$w' $tail ...»':
  values('[#' $w, $(w.srcloc())]',
         '$tail ...')

expr.macro
// `~eval` case
| 'check:
     ~eval
     $result1
     ...
     $(result2 :: result)':
    ~op_stx: check_id
    values('check_same(located '$(check_id)',
                       fun():
                         eval_test(Syntax.literal '$result1
                                                   ...
                                                   $(result2.suffix)
                                                   ...'),
                       fun(): $(result2.body),
                       located '$(result2.mode) ...')',
           '')
// normal block
| 'check:
     $result1
     ...
     $(result2 :: result)':
    ~op_stx: check_id
    values('check_same(located'$(check_id)',
                       fun ():
                         $result1
                         ...
                         $(result2.suffix)
                         ...,
                       matcher($(result2.mode) ..., : $(result2.body)),
                       #'$(result2.mode) ...)',
           '')
// single lines in block
| 'check: $result1 ... $(result2 :: result); ...':
    ~op_stx: check_id
    values('begin:
              check_same(located'$(check_id)',
                         fun (): $result1 ...; $(result2.suffix); ...,
                         matcher($(result2.mode) ..., : $(result2.body)),
                         located'$(result2.mode) ...')
              ...',
           '')
// single line
| 'check $result1 ... $(result2 :: result)':
    ~op_stx: check_id
    values('check_same(located'$(check_id)',
                       fun (): $result1 ...; $(result2.suffix); ...,
                       matcher($(result2.mode) ..., : $(result2.body)),
                       #'$(result2.mode) ...)',
           '')

expr.macro
| 'matcher(~matches, : $binding)':
    values('fun | (): (fun | ($binding): #true | (&_): #false)
                | (x): $("" +& '$binding')',
           '')
| 'matcher(~is_a, : $ann)':
    values('fun | (): (fun (x): x is_a ($ann))
                | (x): $("" +& '$ann')',
           '')
| 'matcher($_, : $body)': values('fun (): $body', '')

fun check_same(loc_where, thunk, expected_thunk, maybe_loc_mode):
  def [mode, srcloc]:
    match maybe_loc_mode
    | [mode, srcloc]: maybe_loc_mode
    | mode: [mode, loc_where[1]]
  def values(got, exn_msg) = call_capturing_exn(thunk)
  def expected = call_capturing_values(expected_thunk)
  def ok:
    match mode
    | #'~prints_like:
        !exn_msg && (("" +& got) == ("" +& expected))
    | #'~is:
        !exn_msg && (got == expected)
    | #'~raises:
        exn_msg && does_contain_each(expected, exn_msg)
    | #'~completes:
        !exn_msg
    | #'~is_a:
        !exn_msg && got.length() == 1 && expected[0](got[0])
    | #'~matches:
        !exn_msg && expected[0](&got)
  #{test-log!}(ok)
  if ok
  | #void
  | fun
    | values_str([v]): print_to_string(v)
    | values_str(lst): "values " +& print_to_string(lst)
    def msg:
      (if #{error-print-source-location}()
       | srcloc.source +& ":" +& srcloc.line
       | loc_where[0])
        +& ": failed\n"
        +& "  got: "
        +& (match mode
            | #'~is_a: "     "
            | ~else: "")
        +& (if exn_msg | "exception " | "") +& (if exn_msg | exn_msg | values_str(got))
        +&  "\n"
        +& "  expected: " +& (match mode
                              | #'~completes: "completion"
                              | #'~raises: "exception " +& values_str(expected)
                              | #'~matches: "matching " +& expected_thunk(#false)
                              | #'~is_a: "satisfying " +& expected_thunk(#false)
                              | ~else: values_str(expected))
    display_as_exn(msg, srcloc)

fun eval_test(stx):
  parameterize {current_toplevel: make_rhombus_toplevel()}:
    eval(Syntax.strip(stx))
