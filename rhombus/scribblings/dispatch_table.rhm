#lang rhombus/static/and_meta
import:
  lib("scribble/rhombus/manual.rkt") open
  lib("scribble/manual.rkt").racketvarfont
  lib("scribble/manual.rkt").racketfont

export:
  dispatch_table

expr.macro
| 'maybe_rhombus()': '""'
| 'maybe_rhombus($args)': 'rhombus($args)'

expr.macro 'dispatch_table($what, $who, [$lhs . $name $lhs_rest ..., $rhs], ...)':
  fun extract_metavariables(term, ht :~ Map):
    match term
    | '($g, ...)': for values(ht = ht):
                     each g: [g, ...]
                     extract_group_metavariables(g, ht)
    | '$(x :: Identifier)':
        ht ++ { Syntax.unwrap(x): x }
    | ~else: ht
  fun extract_group_metavariables(group, ht):
    match group
    | '$t ...': for values(ht = ht):
                  each t: [t, ...]
                  extract_metavariables(t, ht)
  fun extract_lhs_metavariables(groups :~ List, ht):
    for values(ht = ht):
      each g: groups
      match g
      | '$p . _': extract_metavariables(p, ht)
      | ~else: ht
  fun extract_rhs_metavariables(groups :~ List, ht):
    for values(ht = ht):
      each g: groups
      match g
      | '$_ ... ($g, ...)': extract_metavariables('($g, ...)', ht)
      | ~else: ht
  def vars :~ Map:
    extract_rhs_metavariables(
      [rhs, ...],
      extract_metavariables(
        '(($lhs_rest, ...), ...)',
        extract_metavariables(
          [lhs, ...],
          {})))
  def [id, ...]: vars.values()
  def [name_str, ...]: for List:
                         each name: [name, ...]
                         "" +& name.unwrap()
  '«block:
      rhombus_typeset '$id':
        '@racketvarfont("" +& #'$id)'
      ...
      [
        @elem{The @rhombus(.) operator can be used on a @($what) expression as
            equivalent to calling @($who) functions:},
        @nested(
          ~style: #'inset,
          @tabular(
            ~sep: @elem{@hspace(1)is@hspace(1)},
            [
              [@elem{@rhombus($lhs)@racketfont("." ++ $name_str)@maybe_rhombus($lhs_rest ...)}, @rhombus($rhs)],
              ...
            ]
          )
        )
      ]»'
