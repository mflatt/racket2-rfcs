#lang rhombus

import:
  rhombus/meta open
  scribble/rhombus as scribble
  scribble/rhombus/manual

export:
  aside
  demo

fun aside(content, ~italic = #true):
  scribble.nested(~style: symbol(inset), if italic | scribble.italic(content) | content)

defn.macro 'demo: $form; ...':
  ~op_stx: self
  fun split(forms):
    match forms
    | []: []
    | ['~eval: $_', &rest]:
        split(rest)
    | ['~defn: $defn; ...', &rest]:
        [['~defn', [defn, ...]], &split(rest)]
    | ['~repl: $repl; ...', &rest]:
        [['~repl', [repl, ...]], &split(rest)]
    | [form, ...]:
        [['~repl', [form, ...]]]
  fun find_eval(forms, was_found):
    match forms
    | []: #false
    | ['~eval: $(eval_expr :: Group)', &rest]:
        when was_found
        | Syntax.error("duplicate `~eval` clause", '$eval_expr')
        find_eval(rest, #true)
        eval_expr
    | [form, &rest]: find_eval(rest, was_found)    
  def [new_form, ...]:
    for List:
      each j: split([form, ...])
      def [no_prompt, ...]: match j[0]
                            | '~defn': ['~no_prompt']
                            | _: []
      Syntax.relocate_span('@manual.examples(~label: #false,
                                             ~eval: eval,
                                             $no_prompt, ...,
                                             $(List.repet(j[1])), ...)',
                           j[1])
  def eval: find_eval([form, ...], #false)
  'def eval: $(eval || 'manual.make_rhombus_eval()')
   $new_form
   ...
   $(if eval | #void | 'manual.close_eval(eval)')'
