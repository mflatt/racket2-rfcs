#lang rhombus

import:
  rhombus/meta open
  scribble/rhombus/manual
  scribble/rhombus as scribble
  "dispatch_table.rhm" open
  meta_label:
    rhombus open
    rhombus/meta open
  meta:
    lib("scribble/private/typeset_meta.rhm") open

export:
  all_from(rhombus/meta)
  meta_label:
    all_from(rhombus)
    all_from(rhombus/meta)
  all_from("dispatch_table.rhm")
  see_implicit
  provided_note
  provided_meta
  provided_also_meta
  provided_interface_only
  provided_interface_and_namespace_only
  provided_interface_and_other_annotation_only
  demo
  epsilon
  Z
  parens
  brackets
  braces
  s_exp_braces
  quotes
  comma
  colon
  vbar
  more_args
  shrubref

fun see_implicit(what, when, context, ~is_infix = #false):
  @scribble.elem{The @what form is implicitly used when @when is
                 used in @(if is_infix | @scribble.elem{after another @context} | "")
                 in a@(if (context[0] == "e"[0] || context[0] == "i"[0]) | "n" | "")
                 @context position.
                 See also @scribble.secref("implicit").}

fun provided_note(txt):
  scribble.smaller(txt)

fun provided_meta():
  @scribble.elem{@provided_note{Provided as @scribble.rhombus(meta, ~expo).}}

fun provided_also_meta():
  @scribble.elem{@provided_note{Provided both normally and as @scribble.rhombus(meta, ~expo).}}

fun provided_interface_only():
  @provided_note{Provided only in the @scribble.rhombus(class, ~space) space, not
   the @scribble.rhombus(annot, ~space) or @scribble.rhombus(namespace, ~space) space.}

fun provided_interface_and_namespace_only():
  @provided_note{Provided only in the @scribble.rhombus(class, ~space) space, not
   the @scribble.rhombus(annot, ~space) space.}

fun provided_interface_and_other_annotation_only():
  @provided_note{Provided only in the @scribble.rhombus(class, ~space) space
   and @scribble.rhombus(annot, ~space) space, not
   the @scribble.rhombus(namespace, ~space) space.}

// suppressed a label, but `examples` now does that, anyway, so maybe
// we'll end up removing this alias:
defn.macro 'demo($form, ...)':
  ~op_stx: self
  'manual.examples(~label: #false, $form, ...)'

def epsilon = "ϵ"

// A hack to typeset alts as an alternative:
meta.bridge Z: Transformer(fun (stx): 'scribble.hspace(1)')

fun open_close(o, c):
  @scribble.elem{@manual.litchar(o)…@manual.litchar(c)}

def parens = @open_close("(", ")")
def brackets = @open_close("[", "]")
def braces = @open_close("{", "}")
def s_exp_braces = @open_close("#{", "}")
def quotes = @open_close("'", "'")
def comma = @manual.litchar(",")
def colon = @manual.litchar(":")
def vbar = @manual.litchar{|}

def more_args = scribble.elem("....")

fun shrubref(tag):
  scribble.secref(tag,
                  ~doc: [#'lib, "shrubbery/scribblings/shrubbery.scrbl"])
