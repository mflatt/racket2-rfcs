#lang rhombus/static

import:
  rhombus/draw
  pict:
    expose Pict
  lib("slideshow/main.rkt") as rkt
  lib("pict/main.rkt") as rkt_pict
  lib("slideshow/play.rkt") as rkt_play
  lib("racket/string.rkt")

export:
  Pict

  // flattens nested lists in arguments:
  slide

  pause
  alts
  align

  // these flatten nested lists of mixtures of strings and picts
  // and convert only the strings, combining all with `beside`;
  // so, they work well with `@` notation
  t
  bold
  italic
  tt
  roman

  // `ly` variants are syntactic forms that `parameterize`
  // the argument expressions, so that `italic` can be nested in
  // `boldly` to get bold italic, etc.
  boldly
  italicly
  ttly
  romanly

  // like `above`, but with the current line separation
  lines

  // these flatten nested lists, so they work well with `@` notation;
  // unlike Racket slideshow, the default is that the result pict is
  // only as wide as needed, with the intent that `align` is used to
  // make blocks of paragraphs and bullets
  para
  item
  subitem

  table

  interactive

  start_at_recent_slide

// Rhombus should have a short way to write this, and one that
// gives current_font() the right static info
def current_font = Parameter.make(block:
                                    let init = rkt.#{current-main-font}()
                                    fun find_one(a, pred):
                                      match a
                                      | Pair(a, d): find_one(a, pred) || find_one(d, pred)
                                      | ~else: pred(a) && a
                                    draw.Font(~size: 32,
                                              ~name: find_one(init, fun (x): x is_a String),
                                              ~kind: find_one(init, fun (x): x is_a Symbol) || #'default),
                                  ~guard:
                                    block:
                                      fun current_font(font :: draw.Font):
                                        font
                                      current_font)


fun flatten_string(who, c, font) :~ Pict:
  match c
  | s :: String: pict.text(s, ~font: font)
  | p :: Pict: p
  | [c, ...]: pict.beside(~valign: #'topline, flatten_string(who, c, font), ...)
  | ~else:
      error(who, "bad text content: " +& to_string(c, ~mode: #'expr))

fun t(~font: font :: draw.Font = current_font(),
      s, ...) :~ Pict:
  flatten_string(#'t, [s, ...], font)

fun current_font_as_bold():
   (current_font() :~ draw.Font) with (weight = #'bold)

fun current_font_as_italic():
   (current_font() :~ draw.Font) with (style = #'italic)

fun current_font_as_tt():
   (current_font() :~ draw.Font) with (kind = #'modern, name = #false)

fun current_font_as_roman():
   (current_font() :~ draw.Font) with (kind = #'roman, name = #false)

macro 'boldly($arg, ...)':
  '(parameterize { current_font: current_font_as_bold() }:
      t($arg, ...)) :~ Pict'

macro 'italicly($arg, ...)':
  '(parameterize { current_font: current_font_as_italic() }:
      t($arg, ...)) :~ Pict'

macro 'ttly($arg, ...)':
  '(parameterize { current_font: current_font_as_tt() }:
      t($arg, ...)) :~ Pict'

macro 'romanly($arg, ...)':
  '(parameterize { current_font: current_font_as_roman() }:
      t($arg, ...)) :~ Pict'

fun bold(a, ...) :~ Pict:
  boldly(a, ...)

fun italic(a, ...) :~ Pict:
  italicly(a, ...)

fun tt(a, ...) :~ Pict:
  ttly(a, ...)

fun roman(a, ...) :~ Pict:
  romanly(a, ...)

// ----------------------------------------

class Pause():
  implements Printable
  override describe(mode, recur):
    "pause"
def pause = Pause()

class Alts(alts :~ List.of(List)):
  implements Printable
  override describe(mode, recur):
    PrintDesc.list("alts(", alts.map(recur), ")")

fun alts(contents, ...):
  Alts([flatten_slide_content(#'Alts, contents),
        ...])

fun gap(): 24

fun flatten_slide_content(who, c) :~ List:
  match c
  | [c, ...]: List.append(flatten_slide_content(who, c), ...)
  | p :: Pict: [p]
  | p :: satisfying(rkt_pict.#{pict?}): [Pict.from_handle(p)]
  | p :: Pause: [p]
  | Alts([]): []
  | Alts([alt]): alt
  | p :: Alts: [p]
  | ~else:
      error(who, "bad slide content: " +& to_string(c, ~mode: #'expr))

fun pause_to_anim(contents) :~ Pict:
  recur loop (contents = contents, accum :~ List = []) :~ Pict:
    match contents
    | []:
        pict.above(~sep: gap(), & accum)
    | [p :: Pause, & contents]:
        pict.above(~sep: gap(),
                   & pict.sequential(pict.above(~sep: gap(), & accum),
                                     loop(contents, []).timecrop(~keep: #'after)))
    | [Alts([alt, ...]), & contents]:
        let alts = [pause_to_anim(alt),
                    ...]
        let alt0 = alts[0]
        let altN = alts[alts.length() - 1]
        let [alt :~ Pict, ...] = alts.drop_left(1).drop_right(1)
        let p = pict.overlay(& pict.sequential(
                               alt0.timecrop(~keep: #'before),
                               alt.timecrop(),
                               ...,
                               altN.timecrop(~keep: #'after)
                             ))
        loop(contents, accum.add(p))
    | [c, & contents]:
        loop(contents, accum.add(c))

fun slide(~title: title :: maybe(String || Pict) = #false,
          ~layout: layout :: matching(#'auto || #'center || #'top || #'tall) = #'auto,      
          content, ...):
  let p = pause_to_anim(flatten_slide_content(#'slide, [content, ...]))
  for (i: 0..p.epochs):
    let duration = p.epoch_duration(i)
    if duration .= 0
    | rkt.slide(~title: title,
                ~layout: layout,
                p.snapshot(i, 1, MutableMap{}).handle)
    | rkt_play.#{play-n}(~title: title,
                         ~layout: layout,
                         #{#:skip-first?}: p.splices_before,
                         #{#:skip-last?}: (i < p.epochs-1) || p.splices_after,
                         fun (n): p.snapshot(i, n, MutableMap{}).handle)

// ----------------------------------------

fun align(~align: dir :: matching(#'left || #'center || #'right) = #'left,
          content, ...):
  let cs = flatten_slide_content(#'align, [content, ...])
  let width:
    recur loop (cs :~ List = cs):
      for values(w = 0) (c: cs):
        match c
        | p :: Pict: math.max(w, p.max_width)
        | a :: Alts:
            for values(w = 0) (alt: a.alts):
              math.max(w, loop(alt))
        | ~else: w
  recur loop (cs :~ List = cs):
    for List (c: cs):
      match c
      | p :: Pict:
          match dir
          | #'left: p.inset(0, 0, width - p.max_width, 0)
          | #'center: p.inset((width - p.max_width) / 2, 0)
          | #'right: p.inset(width - p.max_width, 0, 0, 0)
      | Alts([alt, ...]):
          Alts([loop(alt), ...])
      | ~else: c

// ----------------------------------------

fun lines(~halign: align :: matching(#'left || #'center || #'right) = #'left,
          p :: Pict, ...) :~ Pict:
  pict.above(~sep: rkt.#{current-line-sep}(),
             ~halign: align,
             p, ...)

def current_para_width = rkt.#{current-para-width}

fun flatten_para_content(who, c) :~ List:
  match c
  | s :: String:
      let PairList[str, ...] = string.#{string-split}(s)
      [rkt.para(#{#:fill?}: #false, str), ...]
  | p :: Pict: [p.snapshot().handle]
  | [c, ...]: List.append(flatten_para_content(who, c), ...)
  | ~else:
      error(who, "bad paragraph content: " +& to_string(c, ~mode: #'expr))


fun para(~width: width = current_para_width(),
         ~at_max: at_max = #false,
         content, ...) :~ Pict:
  Pict.from_handle(rkt.para(#{#:fill?}: at_max,
                            ~width: width,
                            & flatten_para_content(#'slide, [content, ...])))

fun item(~width: width = current_para_width(),
         ~at_max: at_max = #false,
         content, ...) :~ Pict:
  Pict.from_handle(rkt.item(#{#:fill?}: at_max,
                            ~width: width,
                            & flatten_para_content(#'slide, [content, ...])))

fun subitem(~width: width = current_para_width(),
            ~at_max: at_max = #false,
            content, ...) :~ Pict:
  Pict.from_handle(rkt.subitem(#{#:fill?}: at_max,
                               ~width: width,
                               & flatten_para_content(#'slide, [content, ...])))

// ----------------------------------------

fun table(rows :: List.of(List)) :~ Pict:
  let [[elem, ...], ...] = rows
  fun convert(elem):
    match elem
    | elem :: String: t(elem).snapshot().handle
    | elem :: Pict: elem.snapshot().handle
  Pict.from_handle(rkt.table(rows[0].length(),
                             PairList[convert(elem), ..., ...],
                             rkt.#{ltl-superimpose},
                             rkt.#{ltl-superimpose},
                             gap(),
                             rkt.#{current-line-sep}()))

// ----------------------------------------

fun interactive(p :: Pict, callback :: Function.of_arity(1)) :~ Pict:
  Pict.from_handle(rkt.interactive(p.snapshot().handle, callback))

fun start_at_recent_slide():
  rkt.#{start-at-recent-slide}()
