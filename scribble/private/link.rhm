#lang rhombus/static/and_meta

import:
  "util.rhm" open
  lib("scribble/base.rkt")
  lib("scribble/core.rkt")

export:
  hyperlink
  url
  secref
  Secref
  seclink
  docref
  elemtag
  elemref

fun hyperlink(url :: String,
              pre_content :: PreContent,
              ~underline: underline = #true,
              ~style: style :: maybe(Style || String || Symbol) = (if underline
                                                                   | #false
                                                                   | "plainlink")):
  base.hyperlink(url,
                 pre_content,
                 #{#:underline?}: underline,
                 ~style: style)

fun url(dest :: String):
  base.url(dest)

annot.macro 'LinkRenderStyle': 'matching(#'default) || matching(#'number)'

fun secref(tag :: String,
           ~doc: module_path :: maybe(ModulePath) = #false,
           ~tag_prefixes: prefixes :: maybe(List.of(String)) = #false,
           ~underline: underline = #true,
           ~ref_style: ref_style :: maybe(LinkRenderStyle) = #false):
  base.secref(tag,
              ~doc: module_path && ModulePath.s_exp(module_path),
              #{#:tag-prefixes}: convert_list(prefixes),
              #{#:underline?}: underline,
              #{#:link-render-style}: ref_style && core.#{link-render-style}(ref_style))

fun Secref(tag :: String,
           ~doc: module_path :: maybe(ModulePath) = #false,
           ~tag_prefixes: prefixes :: maybe(List.of(String)) = #false,
           ~underline: underline = #true,
           ~ref_style: ref_style :: maybe(LinkRenderStyle) = #false):
  base.Secref(tag,
              ~doc: module_path && ModulePath.s_exp(module_path),
              #{#:tag-prefixes}: convert_list(prefixes),
              #{#:underline?}: underline,
              #{#:link-render-style}: ref_style && core.#{link-render-style}(ref_style))

fun seclink(tag :: String,
            ~doc: module_path :: maybe(ModulePath) = #false,
            ~tag_prefixes: prefixes :: maybe(List.of(String)) = #false,
            ~underline: underline = #true,
            ~indirect: indirect = #false,
            pre_content :: Content = []):
  base.seclink(tag,
               ~doc: module_path && ModulePath.s_exp(module_path),
               #{#:tag-prefixes}: convert_list(prefixes),
               #{#:underline?}: underline,
               #{#:indirect?}: indirect,
               pre_content)

fun docref(module_path :: ModulePath,
           ~underline: underline = #true,
           ~indirect: indirect = #false):
  base.#{other-doc}(ModulePath.s_exp(module_path),
                    #{#:underline?}: underline,
                    #{#:indirect?}: indirect)

fun elemtag(t :: (Taglet || GeneratedTag),
            pre_content :: Content):
  base.elemtag(t, pre_content)

fun elemref(t :: (Taglet || GeneratedTag),
            pre_content :: Content,
            ~underline: underline = #true):
  base.elemref(t,
               pre_content,
               #{#:underline?}: underline)
