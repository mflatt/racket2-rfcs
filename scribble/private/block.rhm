#lang rhombus/static/and_meta

import:
  "util.rhm" open
  lib("scribble/base.rkt")

export:
  para
  nested
  centered
  margin_note
  margin_note_block
  Item
  itemlist
  item
  verbatim
  tabular

fun para(~style: style :: maybe(Style || String || Symbol) = #false,
         pre_content :: PreContent):
  base.para(~style: style,
            pre_content)

fun nested(~style: style :: maybe(Style || String || Symbol) = #false,
           pre_flow :: PreFlow):
  base.nested(~style: style,
              pre_flow)

fun centered(pre_flow :: PreFlow):
  base.centered(pre_flow)

fun margin_note(~at: at :: (matching(#'left) || matching(#'right)) = #'right,
                pre_content :: PreContent):
  base.#{margin-note*}(#{#:left?}: at == #'left,
                       pre_content)

fun margin_note_block(~at: at :: (matching(#'left) || matching(#'right)) = #'right,
                      pre_flow :: PreFlow):
  base.#{margin-note}(#{#:left?}: at == #'left,
                      pre_flow)

annot.macro 'Item': 'satisfying(base.#{item?})'

fun itemlist(~style: style :: maybe(Style || String || Symbol) = #false,
             item :: Item,
             ...):
  base.itemlist(~style: style, item, ...)

fun item(pre_flow :: PreFlow):
  base.item(pre_flow)

fun tabular(cells :: List.of(List.of(Block || Content || matching(#'cont))),
            ~style: style :: maybe(Style || String || Symbol) = #false,
            ~sep: sep :: maybe(Block || Content) = #false,
            ~column_properties: col_props :: List = [],
            ~row_properties: row_props :: List = [],
            ~cell_properties: cell_props :: List.of(List) = [],
            ~sep_properties: sep_props :: maybe(List) = #false):
  base.tabular(convert_list_of_lists(cells),
               ~style: style,
               ~sep: sep,
               #{#:column-properties}: convert_list(col_props),
               #{#:row-properties}: convert_list(row_props),
               #{#:cell-properties}: convert_list_of_lists(cell_props),
               #{#:sep-properties}: convert_list(sep_props))

fun verbatim(~indent: indent :: NonnegInt = 0,
             [content :: Content, ...]):
  base.verbatim(~indent: indent, content, ...)
