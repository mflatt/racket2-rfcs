#lang rhombus/static/and_meta
import:
  "typeset-rhombus.rkt" open
  "rebuild.rhm" open
  meta:
    "rebuild.rhm" open
  "typeset_meta.rhm"
  "spacer.rhm"
  lib("scribble/base.rkt") as scribble:
    expose: elem
  meta:
    "add-space.rkt".#{full-space-names}

export:
  rhombus
  rhombusblock
  rhombusblock_etc

meta:
  fun | andmap(proc, []): #true
      | andmap(proc, [a, a1, ...]): proc(a) && andmap(proc, [a1, ...])

  fun head_context(stxs):
    match stxs
    | '$head $_ ...':
        Syntax.relocate('#false', head)

  fun head_escape_context(stxs):
    match stxs
    | '$head $esc $_ ...':
        Syntax.relocate_span('#false', [head, esc])

  fun group_context(g):
    Syntax.relocate('#false', g)

  fun literal_term(stxs):
    'Syntax.literal($stxs)'

  fun literal_group(stxs):
    'Syntax.literal_group($stxs)'

  fun is_literal_term(stx):
    match stx
    | 'Syntax.literal $_': #true
    | ~else: #false

  fun is_literal_group(stx):
    match stx
    | 'Syntax.literal_group $_': #true
    | ~else: #false

  fun extract_literal(stx):
    match stx
    | '$_ $_ $_($stxs)': stxs

  fun nested([g, ...], builder, builder_stx, stxs):
    def [new_g, ...] = [escape_group(g), ...]
    if andmap(is_literal_group, [new_g, ...])
    | literal_term(builder([extract_literal(new_g), ...], head_context(stxs)))
    | '$builder_stx([$new_g, ...], Syntax.literal($(head_context(stxs))))'

  fun nested_alts([b, ...], stxs):
    def [new_b, ...] = [escape_term(b), ...]
    if andmap(is_literal_term, [new_b, ...])
    | literal_term(alts_syntax([extract_literal(new_b), ...], head_context(stxs)))
    | 'alts_syntax([$new_b, ...], Syntax.literal($(head_context(stxs))))'

  fun escape_group(g):
    def new_g = escape_tail(g)
    if is_literal_group(new_g)
    | literal_group(Syntax.relocate(extract_literal(new_g), group_context(g)))
    | 'Syntax.relocate($new_g, Syntax.literal($(group_context(g))))'

  fun escape_tail(stxs):
    match stxs
    | '#,($expr ...) $tail ...':
        'sequence_cons_syntax(elem($expr ...), $(escape_tail('$tail ...')),
                              Syntax.literal($(head_escape_context(stxs))))'
    | '$head $tail ...':
        def new_head = escape_term(head)
        def new_tail = escape_tail('$tail ...')
        if is_literal_term(new_head) && is_literal_group(new_tail)
        | literal_group(sequence_append_syntax(extract_literal(new_head), extract_literal(new_tail)))
        | 'sequence_append_syntax($new_head, $new_tail)'
    | ~else: literal_group(stxs)

  fun escape_term(stxs):
    match stxs
    | '($(g :: Group), ...)':
        nested([g, ...], parens_syntax, 'parens_syntax', stxs)
    | '[$(g :: Group), ...]':
        nested([g, ...], brackets_syntax, 'brackets_syntax', stxs)
    | '{$(g :: Group), ...}':
        nested([g, ...], braces_syntax, 'braces_syntax', stxs)
    | '«'$(g:: Group); ...'»':
        nested([g, ...], quotes_syntax, 'quotes_syntax', stxs)
    | ': $(g :: Group); ...':
        nested([g, ...], block_syntax, 'block_syntax', stxs)
    | '| $(b :: Block) | ...':
        nested_alts([b, ...], stxs)
    | '$(id :: Name)':
        def mv = syntax_meta.value(id, typeset_meta.space, #false)
        match mv
        | typeset_meta.Transformer(proc):
            'relocate_expansion($(proc(id)),
                                Syntax.literal($(head_context(stxs))))'
        | ~else: literal_term(stxs)
    | ~else: literal_term(stxs)

fun sequence_cons_syntax(a, d, context):
  let a_r: Syntax.relocate(Syntax.make(a), context);
  match d
  | '$e ...': '$a_r $e ...'

fun relocate_expansion(e, context):
  Syntax.relocate(Syntax.make(e), context)

// ----------------------------------------

expr.macro
| 'rhombus ($(forms :: Group))':
    '#{typeset-rhombus}($(escape_group(spacer.adjust_group(forms, #false, '#,'))))'
| 'rhombus ($forms, ~at $(name0 :: Name) $(name :: Name) ...)':
    let sp = [Symbol.from_string(String.append(to_string(name0),
                                               to_string(name), ...))]
    '#{typeset-rhombus}(~space: #'$sp,
                        $(escape_group(spacer.adjust_group(forms, sp, '#,'))))'
| 'rhombus ($forms, $(kw_stx :: Keyword))':
    def kw = Syntax.unwrap(kw_stx)
    cond
    | (kw === #'~var
         || kw === #'~datum
         || kw === #'~value
         || kw === #'~result):
        '#{typeset-rhombus}(~space: #'$kw, $(literal_group(forms)))'
    | (kw === #'~expr
         || kw === #'~defn
         || kw === #'~decl
         || kw === #'~bind
         || kw === #'~impo
         || kw === #'~expo
         || kw === #'~modpath
         || kw === #'~annot
         || kw === #'~repet
         || kw === #'~stxclass
         || kw === #'~reducer
         || kw === #'~class
         || kw === #'~space
         || kw === #'~for_clause
         || kw === #'~class_clause
         || kw === #'~interface_clause
         || kw === #'~veneer_clause
         || kw === #'~entry_point
         || kw === #'~unquote_bind
         || kw === #'~syntax_class_clause
         || kw === #'~pattern_clause
         || kw === #'~space_clause
         || kw === #'~space_meta_clause):
        let sp = #{full-space-names}(kw)
        '#{typeset-rhombus}(~space: #'$kw, $(escape_group(spacer.adjust_group(forms, sp, '#,'))))'
    | ~else:
        syntax_meta.error("invalid space", kw_stx)

expr.macro 'rhombusblock_etc $tail ...':
  ~all_stx stx
  fun finish([opt, ...], fin_tail):
    match fin_tail
    | ': $_': #void
    | ~else: syntax_meta.error("expected a block", stx)
    '#{typeset-rhombusblock}(
       $opt, ...,
       $(escape_term(spacer.adjust_term(fin_tail, #false, '#,')))
     )'
  fun check_options(options :~ List):
    for (opt: options):
      match opt
      | '$('~inset' || '~indent' || '~prompt' || '~indent_from_block'): $_': #void
      | ~else: syntax_meta.error("invalid option", stx, opt)
  match '$tail ...'
  | '($option, ...) $new_tail ...':
      check_options([option, ...])
      finish([option, ...], '$new_tail ...')
  | ~else: finish([], '$tail ...')

expr.macro 'rhombusblock ($args)':
  '#{typeset-rhombusblock}(
     ~indent_from_block: #false,
     $(escape_term(spacer.adjust_term(': $args', #false, '#,')))
   )'
