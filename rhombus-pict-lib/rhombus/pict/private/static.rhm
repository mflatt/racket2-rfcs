#lang rhombus/static/and_meta

import:
  rhombus/draw:
    expose Color
  lib("pict/main.rkt") as rkt:
    expose #{pict?}
  lib("file/convertible.rkt") as fileconv
  lib("pict/convert.rkt") as pictconv

export:
  Color
  ColorMode
  LineWidth
  HorizAlignment
  VertAlignment
  EpochAlignment
  DurationAlignment
  TimeAlignment
  OverlayOrder
  TimeOrder
  ConnectStyle
  ArcDirection  
  FindMode
  Refocus
  Rounded
  AutoReal

  Pict:
    only_space namespace annot
  only_space annot:
    StaticPict
    NothingPict

  nothing

  text
  
  beside
  stack
  overlay

  blank
  line
  rectangle
  square
  ellipse
  circle
  polygon
  bitmap
  dc

  Find
  connect
  pin

  table

  animate_map

module private:
  export:
    Pict
    set_convert
    _Pict
    StaticPict
    NothingPict
    ContainerPict
    _ContainerPict
    static_instance
    remove_nothings
    set_switch
    set_animate
    METHOD

enum ColorMode:
  ~is_a Color
  ~is_a String
  inherit

enum LineWidth:
  ~is_a Real
  inherit

enum HorizAlignment: left center right
enum VertAlignment: top topline center baseline bottom
enum EpochAlignment: early center stretch late
enum DurationAlignment: sustain pad
enum TimeAlignment: ~is_a Int; start sync insert end
enum OverlayOrder: front back
enum TimeOrder: before after
enum ConnectStyle: line arrow arrows
enum ArcDirection: cw ccw
enum FindMode: always maybe
enum AutoReal: ~is_a Real; auto

def empty_instances = []

annot.delayed_declare SnapshotPict

expr.macro 'METHOD($name, $arg, ...)':
  'fun (this :~ _Pict): this . $name($arg, ...)'

class Pict():
  nonfinal
  export from_handle
  internal _Pict

  private implements Equatable
  private override equals(other, recur):
    other === this
  private override hash_code(recur):
    Equatable.identity_hash(this)

  primitive_property fileconv.#{prop:convertible}:
    fun (self :~ Pict, req, defval):
      fileconv.convert(self.snapshot().handle, req, defval)
  primitive_property pictconv.#{prop:pict-convertible}:
    fun (self :~ Pict):
      self.snapshot().handle

  private implements Printable
  private override describe(mode, recur):
    PrintDesc.special(snapshot().handle, ~mode: #'print,
                      "Pict(...)")

  abstract property width :~ Real
  abstract property height :~ Real
  abstract property ascent :~ Real
  abstract property descent :~ Real

  abstract property duration :~ Int
  abstract method epoch_extent(i :: Int) :~ Real
  abstract method
  | snapshot() :~ SnapshotPict
  | snapshot(epoch :: Int,
             n :: Real.in(0, 1)) :~ SnapshotPict

  abstract property children :~ List.of(Pict)
  abstract property _children_starts :~ List.of(Int)

  abstract method launder() :~ Pict
  abstract method ghost(do_ghost = #true) :~ Pict
  abstract method refocus(to_p :: Pict) :~ Pict

  abstract protected method
  | _pad(amt :: Real) :~ Pict
  | _pad(h_amt :: Real, v_amt :: Real) :~ Pict
  | _pad(left_amt :: Real, top_amt :: Real,
         right_amt :: Real, bottom_amt :: Real) :~ Pict
  method pad(around :: Real = 0,
             ~horiz: horiz :: Real = around,
             ~vert: vert :: Real = around,
             ~left: left :: Real = horiz,
             ~top: top :: Real = vert,
             ~right: right :: Real = horiz,
             ~bottom: bottom :: Real = vert) :~ Pict:
    _pad(left, top, right, bottom)

  method translate(dx :: Real, dy :: Real) :~ Pict:
    if dy .= 0
    | _pad(dx, 0, -dx, 0)
    | // can't use `pad`, because we don't want to change the ascent or descent      
      pin(this,
          ~on: blank(~width: width, ~height: height, ~ascent: ascent, ~descent: descent),
          ~at: Find.abs(dx, dy))

  abstract method lift(amt :: Real) :~ Pict
  abstract method drop(amt :: Real) :~ Pict

  abstract method
  | scale(amt :: Real) :~ Pict
  | scale(h_amt :: Real, v_amt :: Real) :~ Pict

  abstract method rotate(radians :: Real) :~ Pict
  method hflip() :~ Pict:
    scale(-1, 1).pad(~right: width, ~left: width)
  method vflip() :~ Pict:
    hflip().rotate(math.pi)

  abstract method shear(horiz :: Real, vert :: Real) :~ Pict

  abstract method colorize(c :: (Color || String)) :~ Pict
  abstract method line_width(w :: NonnegReal) :~ Pict

  abstract method alpha(n :: Real.in(0, 1)) :~ Pict

  abstract method clip() :~ Pict

  abstract method freeze(~scale: scale :: Real = 2.0) :~ Pict

  abstract protected method _time_pad(before :: Int, after :: Int) :~ Pict
  abstract method time_clip(~keep: keep :: maybe(TimeOrder) = #false,
                            ~nonsustaining: nonsustaining = keep != #'after) :~ Pict
  method delay(n :: NonnegInt) :~ Pict: time_clip(~keep: #'after).time_pad(~before: 1)
  abstract method sustain(n :: Int = 1) :~ Pict
  abstract method nonsustaining() :~ Pict
  abstract method epoch_set_extent(i :: Int, extent :: NonnegReal) :~ Pict

  abstract method epoch_metadata(i :: Int) :~ Map
  abstract method epoch_set_metadata(i :: Int, metadata :: Map) :~ Pict

  abstract method metadata() :~ Map
  abstract method set_metadata(metadata :: Map) :~ Pict

  method time_pad(~all: all :: Int = 0,
                  ~before: before :: Int = all,
                  ~after: after :: Int = all) :~ Pict:
    _time_pad(before, after)

  abstract method time_insert(at_epoch :: Int, n_epochs :: Int = 1) :~ Pict

  method instantaneous() :~ Pict:
    let p = snapshot()
    Pict.time_clip(pict_animate(fun (n, p): if n .= 0 | p | nothing,
                                [p],
                                0 /* extent */))

  method replace(from :: Pict, to :: Pict) :~ Pict:
    let (p, _) = _replace(from, to, Map.by(===){ from : to })
    p

  method configure(key :: !Pict, val) :~ Pict:
    let (p, _) = _replace(key, val, Map.by(===){})
    p

  abstract protected method _replace(from, to, subst) :~ (Pict, Map)

  protected method _do_replace(key, val, subst :~ Map,
                               _children, _dependencies, _configuration,
                               _rebuild):
    cond
    | subst.has_key(this):
        values(subst[this], subst)
    | ~else:
        match  _dependencies || _children:
        | [] when !_configuration:
            values(this, subst)
        | [dep, ...]:
            let ([new_dep, ...], subst :~ Map):
              for values(new_deps :~ List = [], subst = subst) (dep: [dep, ...]):
                let (new_dep, new_subst):
                  match dep
                  | dep :: Pict: dep._replace(key, val, subst)
                  | dep :: _Find: dep._replace(key, val, subst)
                values(new_deps.add(new_dep), new_subst)
            let configuration:
              if _configuration && Map.has_key(_configuration, key)
              | (_configuration :~ Map) ++ { key: val }
              | _configuration
            if (configuration == _configuration
                  && all(new_dep === dep, ...))
            | values(this, subst)
            | let new: if configuration
                       | _rebuild([new_dep, ...] ++ [configuration])
                       | _rebuild([new_dep, ...])
              values(new, subst ++ { this: new })
        | child :~ _StaticPict:
            let (new_child, subst :~ Map) = child._replace(key, val, subst)
            if new_child === child
            | values(this, subst)
            | let new = _rebuild(new_child)
              values(new, subst ++ { this: new })

class StaticPict(private _handle,
                 private _children :~ Pict || List,
                 private _dependencies :~ maybe(List),
                 private _instances :~ List,
                 private _rebuild,
                 private _metadata :~ Map):
  extends Pict
  nonfinal
  opaque
  internal _StaticPict
  constructor
  | (): super()(rkt.blank(), [], #false, empty_instances, #false, {})
  | (children, rebuild): super()(rkt.blank(), children, #false, empty_instances, rebuild, {})

  property handle: _handle
  override property width: rkt.#{pict-width}(_handle)
  override property height: rkt.#{pict-height}(_handle)
  override property ascent: rkt.#{pict-ascent}(_handle)
  override property descent: rkt.#{pict-descent}(_handle)

  override property duration: 1
  override method epoch_extent(i :: Int): 0

  override method
  | snapshot():
      static_pict(_handle, this, _instances, METHOD(snapshot))
  | snapshot(epoch, n):
      if epoch == 0
      | snapshot()
      | static_pict(rkt.ghost(_handle), this, _instances, METHOD(snapshot))

  override property children:
    if _children is_a Pict
    | [_children]
    | _children

  override property _children_starts:
    for List (c: children):
      0

  override method launder() :~ Pict:
    static_pict(rkt.launder(_handle), [], empty_instances, METHOD(launder))

  override method ghost(do_ghost = #true) :~ Pict:
    if do_ghost
    | static_pict(rkt.ghost(_handle), this, _instances, METHOD(ghost))
    | this

  override method refocus(to_p :: Pict) :~ Pict:
    fun retry([this :~ Pict, to_p]): this.refocus(to_p)
    match to_p
    | to_p :: _StaticPict:
        static_pict(rkt.refocus(_handle, to_p.handle), this, _instances,
                    ~dependencies: [this, to_p], retry)
    | ~else:
        let to_handle = find_instance(this, to_p)
        if to_handle
        | static_pict(rkt.refocus(handle, to_handle), this, _instances,
                      ~dependencies: [this, to_p], retry)
        | error(#'refocus, "pict for refocus not found")

  override method
  | _pad(amt :: Real):
      static_pict(rkt.inset(_handle, amt), this, _instances, METHOD(_pad, amt))
  | _pad(h_amt :: Real, v_amt :: Real):
      static_pict(rkt.inset(_handle, h_amt, v_amt), this, _instances, METHOD(_pad, h_amt, v_amt))
  | _pad(left :: Real, top :: Real,
         right :: Real, bottom :: Real):
      static_pict(rkt.inset(_handle, left, top, right, bottom), this, _instances,
                  METHOD(_pad, left, top, right, bottom))

  override method lift(amt :: Real) :~ Pict:
    static_pict(rkt.#{lift-bottom-relative-to-baseline}(_handle, amt), this, _instances,
                METHOD(lift, amt))
  override method drop(amt :: Real) :~ Pict:
    static_pict(rkt.#{drop-top-relative-to-ascent}(_handle, amt), this, _instances,
                METHOD(drop, amt))

  fun _raw_scale(handle, h_amt, v_amt):
    let p = rkt.scale(handle, h_amt, v_amt)
    let p = if h_amt .= 0 || v_amt .= 0 | rkt.ghost(p) | p
    p

  override method
  | scale(amt :: Real) :~ Pict:
      static_pict(_raw_scale(_handle, amt, amt), this, _instances, METHOD(scale, amt))
  | scale(h_amt :: Real, v_amt :: Real) :~ Pict:
      static_pict(_raw_scale(_handle, h_amt, v_amt), this, _instances, METHOD(scale, h_amt, v_amt))

  override method rotate(radians :: Real) :~ Pict:
    static_pict(rkt.rotate(_handle, radians), this, _instances, METHOD(rotate))

  override method shear(horiz :: Real, vert :: Real) :~ Pict:
    static_pict(rkt.shear(_handle, horiz, vert), this, _instances, METHOD(shear, horiz, vert))

  override method colorize(c :: (Color || String)) :~ Pict:
    let c = as_color(c)
    static_pict(rkt.colorize(_handle, c), this, _instances, METHOD(colorize, c))
  override method line_width(w :: NonnegReal) :~ Pict:
    static_pict(rkt.linewidth(w, _handle), this, _instances, METHOD(line_width, w))

  override method alpha(n :: Real.in(0, 1)) :~ Pict:
    static_pict(rkt.cellophane(_handle, n), this, _instances, METHOD(alpha, n))

  override method clip() :~ Pict:
    static_pict(rkt.clip(_handle), this, _instances, METHOD(clip))

  override method freeze(~scale: scale :: Real = 2.0):
    static_pict(rkt.freeze(_handle), this, _instances, METHOD(freeze, ~scale: scale))
  
  override method time_clip(~keep: keep :: maybe(TimeOrder) = #false,
                            ~nonsustaining: nonsustaining = keep != #'after) :~ Pict:
    convert([this], #'center, #'pad, fun (ps :~ List, dt, n): ps[0])
      .time_clip(~keep: keep, ~nonsustaining: nonsustaining)

  override method _time_pad(before :: Int, after :: Int) :~ Pict:
    if before == 0 && after == 0
    | this
    | convert([this], #'center, #'pad, fun (ps :~ List, dt, n): ps[0])._time_pad(before, after)
  override method sustain(n :: Int = 1) :~ Pict:  
    if n == 0
    | this
    | convert([this], #'center, #'pad, fun (ps :~ List, dt, n): ps[0]).sustain(n)
  override method nonsustaining() :~ Pict:
    convert([this], #'center, #'pad, fun (ps :~ List, dt, n): ps[0]).nonsustaining()

  override method epoch_set_extent(i :: Int, extent :: NonnegReal):
    convert([this], #'center, #'pad, fun ([p], dt, n): p).epoch_set_extent(i, extent)

  override method metadata(): _metadata
  override method set_metadata(metadata :: Map):
    static_pict(rkt.inset(_handle, 0), this, _instances, METHOD(set_metadata, metadata),
                ~metadata: metadata)

  override method epoch_metadata(epoch :: Int): {}
  override method epoch_set_metadata(i :: Int, metadata :: Map):
    if metadata == {}
    | this
    | convert([this], #'center, #'pad, fun ([p], dt, n): p).epoch_set_metadata(i, metadata)

  override time_insert(at_epoch :: Int, n_epochs :: NonnegInt = 1):
    if at_epoch == 0
    | sustain(n_epochs)
    | this

  override method _replace(key, val, subst :~ Map):
    _do_replace(key, val, subst,
                _children, _dependencies, #false,
                _rebuild)

annot.delayed_complete SnapshotPict: StaticPict

fun static_pict(handle, children, instances, rebuild = #false,
                ~dependencies: dependencies = #false,
                ~metadata: metadata = {}) :~ StaticPict:
  _StaticPict()(handle, children, dependencies, instances, rebuild, metadata)

def mutable do_convert = (fun (p): error("convert not ready"))
fun convert(p :~ List.of(Pict), epoch, duration, combine, non_sustain_combine = combine,
            ~dependencies: dependencies = #false,
            ~rebuild: rebuild = #false) :~ Pict:
  do_convert(p, epoch, duration, combine, non_sustain_combine, dependencies, rebuild)
fun set_convert(proc):
  do_convert := proc

fun animate_map(p :~ List.of(Pict),
                ~combine: combine :: Function.of_arity(3),
                ~duration: duration :: DurationAlignment = #'sustain,
                ~epoch: epoch :: EpochAlignment = #'center,
                ~non_sustain_combine: non_sustain_combine :: Function.of_arity(3) = combine) :~ Pict:
  do_convert(p, epoch, duration, combine, non_sustain_combine, #false, #false)

// used by `sequential` and `concurrent`
class ContainerPict(private ps :~ List.of(Pict)):
  extends StaticPict
  internal _ContainerPict
  constructor (ps, children, rebuild):
    super(children, rebuild)(ps)

class NothingPict():
  extends StaticPict
  constructor (): super()()

  override property width: 0
  override property height: 0
  override property ascent: 0
  override property descent: 0

  override property duration: 1
  override method
  | epoch_extent(i :: Int): 0
  | epoch_extent(i :: Int, extent :: NonnegReal): this

  override method
  | snapshot(): this
  | snapshot(epoch, n): this

  override method launder(): this
  override method ghost(do_ghost = #true): this
  override method refocus(to_p :: Pict):
    error(#'refocus, "cannot refocus nothing")

  override method
  | _pad(amt :: Real): this
  | _pad(h_amt :: Real, v_amt :: Real): this
  | _pad(left_amt :: Real, top_amt :: Real,
         right_amt :: Real, bottom_amt :: Real): this

  override method lift(amt :: Real): this
  override method drop(amt :: Real): this

  override method
  | scale(amt :: Real): this
  | scale(h_amt :: Real, v_amt :: Real): this

  override method rotate(radians :: Real): this
  override method shear(horiz :: Real, vert :: Real): this
                                           
  override method colorize(c :: (Color || String)): this
  override method line_width(w :: NonnegReal): this
  
  override method alpha(n :: Real.in(0, 1)): this

  override method clip(): this

  override method time_clip(~keep: keep :: maybe(TimeOrder) = #false,
                            ~nonsustaining: nonsustaining = keep != #'after): this

  override method _time_pad(before :: Int, after :: Int): this
  override method sustain(n :: Int = 1): this
  override method nonsustaining(): this

  override method epoch_set_extent(i :: Int, extent :: NonnegReal): this
  override method epoch_metadata(epoch :: Int): {}
  override method epoch_set_metadata(i :: Int, metadata :: Map): this

  override method metadata(): {}
  override method set_metadata(metadata :: Map): this

  override method freeze(~scale: scale :: Real = 2.0): this

  override method _replace(from, to): this

def nothing = NothingPict()

fun remove_nothings(ps :~ List):
  for List (p: ps):
    skip_when p == nothing
    p

fun from_handle(p :: satisfying(#{pict?}),
                combining :: List.of(StaticPict) = [],
                rebuild :: maybe(Function.of_arity(1)) = #false) :~ Pict:
  let [sub :~ _StaticPict, ...] = combining
  static_pict(p, [sub, ...], [sub._instances, ...], rebuild)

fun static_instance([p :: Pict, ...], as_p :: _StaticPict,
                    ~dependencies: dependencies = #false,
                    ~rebuild: rebuild = fun (p): p):
  if as_p == nothing
  | as_p
  | let handle: rkt.inset(as_p.handle, 0) // fresh identity
    static_pict(handle, as_p, as_p._instances ++ [Pair(p, handle), ...], rebuild,
                ~dependencies: dependencies)

fun find_instance(p :: _StaticPict, q :~ Pict):
  recur loop (instances :: List = p._instances):
    for any (inst: instances):
      match inst
      | Pair(key, handle):
          key === q && handle
      | ~else:
          loop(inst)

def default_font = draw.Font()

fun beside(~sep: sep ::Real = 0,
           ~vert: vert :: VertAlignment = #'center,
           ~order: order :: OverlayOrder = #'front,
           ~epoch: epoch :: EpochAlignment = #'center,
           ~duration: duration :: DurationAlignment = #'sustain,
           p :: Pict, ...) :~ Pict:
  recur retry (ps = [p, ...]):
    match remove_nothings(ps):
    | []:
        nothing
    | [p]: p
    | [p :: _StaticPict, ...]:
        let children = [p, ...]
        let all_instances = [p._instances, ...]          
        let new_handle:
          if order == #'front
          | match vert
            | #'top: rkt.#{ht-append}(sep, p.handle, ...)
            | #'topline: rkt.#{htl-append}(sep, p.handle, ...)
            | #'center: rkt.#{hc-append}(sep, p.handle, ...)
            | #'baseline: rkt.#{hbl-append}(sep, p.handle, ...)
            | #'bottom: rkt.#{hb-append}(sep, p.handle, ...)
          | let [g, ...] = [rkt.launder(rkt.ghost(p.handle)), ...]
            let g_hand:
              match vert
              | #'top: rkt.#{ht-append}(sep, g, ...)
              | #'topline: rkt.#{htl-append}(sep, g, ...)
              | #'center: rkt.#{hc-append}(sep, g, ...)
              | #'baseline: rkt.#{hbl-append}(sep, g, ...)
              | #'bottom: rkt.#{hb-append}(sep, g, ...)
            for values(hand = g_hand) (p_hand: [p.handle, ...],
                                       g: [g, ...]):
              rkt.#{pin-under}(hand, g, rkt.#{lt-find}, p_hand)                
        static_pict(new_handle, children, all_instances, retry)
    | ps:
        convert(ps, epoch, duration, fun(ps, dt, n): retry(ps))

namespace beside:
  export:
    top topline center baseline bottom
  fun top(~sep: sep :: Real = 0, p :: Pict, ...) :~ Pict:
    beside(~sep: sep, ~vert: #'top, p, ...)
  fun topline(~sep: sep :: Real = 0, p :: Pict, ...) :~ Pict:
    beside(~sep: sep, ~vert: #'topline, p, ...)
  fun center(~sep: sep :: Real = 0, p :: Pict, ...) :~ Pict:
    beside(~sep: sep, ~vert: #'center, p, ...)
  fun baseline(~sep: sep :: Real = 0, p :: Pict, ...) :~ Pict:
    beside(~sep: sep, ~vert: #'baseline, p, ...)
  fun bottom(~sep: sep :: Real = 0, p :: Pict, ...) :~ Pict:
    beside(~sep: sep, ~vert: #'bottom, p, ...)

fun stack(~sep: sep :: Real = 0,
          ~horiz: horiz :: HorizAlignment = #'center,
          ~order: order :: OverlayOrder = #'front,
          ~epoch: epoch :: EpochAlignment = #'center,
          ~duration: duration :: DurationAlignment = #'sustain,
          p :: Pict, ...) :~ Pict:
  recur retry (ps = [p, ...], dt = 0, n = 0):
    match remove_nothings(ps):
    | []:
        nothing
    | [p]: p
    | [p :: _StaticPict, ...]:        
        let children = [p, ...]
        let all_instances = [p._instances, ...]
        let new_handle:
          if order == #'front
          | match horiz
            | #'left: rkt.#{vl-append}(sep, p.handle, ...)
            | #'center: rkt.#{vc-append}(sep, p.handle, ...)
            | #'right: rkt.#{vr-append}(sep, p.handle, ...)
          | let [g, ...] = [rkt.launder(rkt.ghost(p.handle)), ...]
            let g_hand:
              match horiz
              | #'left: rkt.#{vl-append}(sep, g, ...)
              | #'center: rkt.#{vc-append}(sep, g, ...)
              | #'right: rkt.#{vr-append}(sep, g, ...)
            for values(hand = g_hand) (p_hand: [p.handle, ...],
                                       g: [g, ...]):
              rkt.#{pin-under}(hand, g, rkt.#{lt-find}, p_hand)
        static_pict(new_handle, children, all_instances,
                    fun (ps): retry(ps, dt, n))
    | ps:
        convert(ps, epoch, duration, retry)

namespace stack:
  export:
    left center right
  fun left(~sep: sep :: Real = 0, p :: Pict, ...) :~ Pict:
    stack(~sep: sep, ~horiz: #'left, p, ...)
  fun center(~sep: sep :: Real = 0, p :: Pict, ...) :~ Pict:
    stack(~sep: sep, ~horiz: #'center, p, ...)
  fun right(~sep: sep :: Real = 0, p :: Pict, ...) :~ Pict:
    stack(~sep: sep, ~horiz: #'right, p, ...)

fun overlay(~horiz: horiz :: HorizAlignment = #'center,
            ~vert: vert :: VertAlignment = #'center,
            ~order: order :: OverlayOrder = #'front,
            ~epoch: epoch :: EpochAlignment = #'center,
            ~duration: duration :: DurationAlignment = #'sustain,
            p :: Pict, ...) :~ Pict:
  recur retry (ps = [p, ...]):
    match remove_nothings(ps):
    | []:
        nothing
    | [p]: p
    | [p :: _StaticPict, ...]:
        let children = [p, ...]
        let all_instances = [p._instances, ...]
        let ps = [p._handle, ...]
        fun build(ps :~ List):
          let [p, ...] = if order == #'back | ps.reverse() | ps
          match horiz
          | #'left:
              match vert:
              | #'top: rkt.#{lt-superimpose}(p, ...)
              | #'topline: rkt.#{ltl-superimpose}(p, ...)
              | #'center: rkt.#{lc-superimpose}(p, ...)
              | #'baseline: rkt.#{lbl-superimpose}(p, ...)
              | #'bottom: rkt.#{lb-superimpose}(p, ...)
          | #'center:
              match vert:
              | #'top: rkt.#{ct-superimpose}(p, ...)
              | #'topline: rkt.#{ctl-superimpose}(p, ...)
              | #'center: rkt.#{cc-superimpose}(p, ...)
              | #'baseline: rkt.#{cbl-superimpose}(p, ...)
              | #'bottom: rkt.#{cb-superimpose}(p, ...)
          | #'right:
              match vert:
              | #'top: rkt.#{rt-superimpose}(p, ...)
              | #'topline: rkt.#{rtl-superimpose}(p, ...)
              | #'center: rkt.#{rc-superimpose}(p, ...)
              | #'baseline: rkt.#{rbl-superimpose}(p, ...)
              | #'bottom: rkt.#{rb-superimpose}(p, ...)
        static_pict(build(ps), children, all_instances, retry)
    | ps:
        convert(ps, epoch, duration, fun (ps, dt, n): retry(ps))

namespace overlay: 
  export:
    center
    left
    right
    top
    topline
    baseline
    bottom
    left_top top_left
    left_topline topline_left
    left_center center_left
    left_baseline baseline_left
    left_bottom bottom_left
    center_top top_center
    center_topline topline_center
    center_center
    center_baseline baseline_center
    center_bottom bottom_center
    right_top top_right
    right_topline topline_right
    right_center center_right
    right_baseline baseline_right
    right_bottom bottom_right
  fun center(p :: Pict, ...) :~ Pict: overlay(~horiz: #'center, ~vert: #'center, p, ...)
  fun left(p :: Pict, ...) :~ Pict: overlay(~horiz: #'left, ~vert: #'center, p, ...)
  fun right(p :: Pict, ...) :~ Pict: overlay(~horiz: #'right, ~vert: #'center, p, ...)
  fun top(p :: Pict, ...) :~ Pict: overlay(~horiz: #'center, ~vert: #'top, p, ...)
  fun topline(p :: Pict, ...) :~ Pict: overlay(~horiz: #'center, ~vert: #'topline, p, ...)
  fun baseline(p :: Pict, ...) :~ Pict: overlay(~horiz: #'center, ~vert: #'baseline, p, ...)
  fun bottom(p :: Pict, ...) :~ Pict: overlay(~horiz: #'center, ~vert: #'bottom, p, ...)

  fun left_top(p :: Pict, ...) :~ Pict: overlay(~horiz: #'left, ~vert: #'top, p, ...)
  fun top_left(p :: Pict, ...) :~ Pict: overlay(~horiz: #'left, ~vert: #'top, p, ...)
  fun left_topline(p :: Pict, ...) :~ Pict: overlay(~horiz: #'left, ~vert: #'topline, p, ...)
  fun topline_left(p :: Pict, ...) :~ Pict: overlay(~horiz: #'left, ~vert: #'topline, p, ...)
  fun left_center(p :: Pict, ...) :~ Pict: overlay(~horiz: #'left, ~vert: #'center, p, ...)
  fun center_left(p :: Pict, ...) :~ Pict: overlay(~horiz: #'left, ~vert: #'center, p, ...)
  fun left_baseline(p :: Pict, ...) :~ Pict: overlay(~horiz: #'left, ~vert: #'baseline, p, ...)
  fun baseline_left(p :: Pict, ...) :~ Pict: overlay(~horiz: #'left, ~vert: #'baseline, p, ...)
  fun left_bottom(p :: Pict, ...) :~ Pict: overlay(~horiz: #'left, ~vert: #'bottom, p, ...)
  fun bottom_left(p :: Pict, ...) :~ Pict: overlay(~horiz: #'left, ~vert: #'bottom, p, ...)

  fun right_top(p :: Pict, ...) :~ Pict: overlay(~horiz: #'right, ~vert: #'top, p, ...)
  fun top_right(p :: Pict, ...) :~ Pict: overlay(~horiz: #'right, ~vert: #'top, p, ...)
  fun right_topline(p :: Pict, ...) :~ Pict: overlay(~horiz: #'right, ~vert: #'topline, p, ...)
  fun topline_right(p :: Pict, ...) :~ Pict: overlay(~horiz: #'right, ~vert: #'topline, p, ...)
  fun right_center(p :: Pict, ...) :~ Pict: overlay(~horiz: #'right, ~vert: #'center, p, ...)
  fun center_right(p :: Pict, ...) :~ Pict: overlay(~horiz: #'right, ~vert: #'center, p, ...)
  fun right_baseline(p :: Pict, ...) :~ Pict: overlay(~horiz: #'right, ~vert: #'baseline, p, ...)
  fun baseline_right(p :: Pict, ...) :~ Pict: overlay(~horiz: #'right, ~vert: #'baseline, p, ...)
  fun right_bottom(p :: Pict, ...) :~ Pict: overlay(~horiz: #'right, ~vert: #'bottom, p, ...)
  fun bottom_right(p :: Pict, ...) :~ Pict: overlay(~horiz: #'right, ~vert: #'bottom, p, ...)

  fun center_top(p :: Pict, ...) :~ Pict: overlay(~horiz: #'center, ~vert: #'top, p, ...)
  fun top_center(p :: Pict, ...) :~ Pict: overlay(~horiz: #'center, ~vert: #'top, p, ...)
  fun center_topline(p :: Pict, ...) :~ Pict: overlay(~horiz: #'center, ~vert: #'topline, p, ...)
  fun topline_center(p :: Pict, ...) :~ Pict: overlay(~horiz: #'center, ~vert: #'topline, p, ...)
  fun center_center(p :: Pict, ...) :~ Pict: overlay(~horiz: #'center, ~vert: #'center, p, ...)
  fun center_baseline(p :: Pict, ...) :~ Pict: overlay(~horiz: #'center, ~vert: #'baseline, p, ...)
  fun baseline_center(p :: Pict, ...) :~ Pict: overlay(~horiz: #'center, ~vert: #'baseline, p, ...)
  fun center_bottom(p :: Pict, ...) :~ Pict: overlay(~horiz: #'center, ~vert: #'bottom, p, ...)
  fun bottom_center(p :: Pict, ...) :~ Pict: overlay(~horiz: #'center, ~vert: #'bottom, p, ...)

fun text(content :: String,
         ~font: font :: draw.Font = default_font) :~ Pict:
  static_pict(rkt.text(content, font.handle), [], empty_instances)

fun blank(size = 0,
          ~width: width :: Real = size,
          ~height: height :: Real = size,
          ~ascent: ascent :: Real = height,
          ~descent: descent :: Real = 0) :~ StaticPict:
  static_pict(rkt.blank(width, height, ascent, descent), [], empty_instances)

fun make_dc_pict(draw_it, w, h, a, d, line, line_width, fill):
  rkt.dc(fun (dc_handle, dx, dy):
              let dc = draw.DC.from_handle(dc_handle)
              dc.save()
              match fill
              | #false: dc.brush := draw.Brush.none
              | #'inherit: dc.brush := draw.Brush(~color: dc.pen.color)
              | ~else: dc.brush := draw.Brush(~color: fill)                    
              match line
              | #'inherit:
                  when line_width != #'inherit
                  | dc.pen := dc.pen with (width = line_width)
              | #false: dc.pen := draw.Pen.none
              | ~else: dc.pen := draw.Pen(~color: line,
                                          ~width: (if line_width == #'inherit
                                                   | dc.pen.width
                                                   | line_width))
              draw_it(dc, dx, dy)
              dc.restore(),
         w, h, a, d)

fun line(~dx: dx :: Real = 0,
         ~dy: dy :: Real = 0,
         ~line: color :: ColorMode = #'inherit,
         ~line_width: width :: LineWidth = #'inherit) :~ Pict:
  let ln:
    cond
    | dx == 0: if dy == 0
               | rkt.blank()
               | rkt.vline(0, dy)
    | dy == 0: rkt.hline(dx, 0)
    | ~else:
        rkt.dc(fun (dc_handle, ddx, ddy):
                 let dc = draw.DC.from_handle(dc_handle)
                 dc.line([ddx, ddy], [ddx + dx, ddy + dy]),
               dx, dy)
  let cln:
    if color != #'inherit
    | rkt.colorize(ln, color)
    | ln
  static_pict(if width != #'inherit
              | rkt.linewidth(width, cln)
              | cln,
              [],
              empty_instances)

fun as_color(color):
  match color
  | #'inherit: #false
  | s :: String: s
  | c :: Color: c.handle

fun as_width(w):
  match w
  | #'inherit: #false
  | ~else: w

fun maybe_pad(p :~ Pict, dw, dh):
  if dw .= 0 && dh .= 0
  | p
  | p.pad(~horiz: dw/2, ~vert: dh/2)

enum Rounded:
  ~is_a Real
  default

enum Refocus:
  ~is_a Pict
  around

fun extract_auto_sizes(around, width, height, resize):
  let w:
    if width == #'auto
    | match around
      | around :: Pict: around.width
      | ~else: 32
    | width
  let h:
    if height == #'auto
    | match around
      | around :: Pict: around.height
      | ~else: w
    | height
  values(resize(w, h),
         resize(h, w))

fun do_around(~around: around,
              ~width: width,
              ~height: height,
              ~resize: resize,
              ~make: make,
              ~order: order,
              ~refocus: refocus,
              ~epoch: epoch,
              ~duration: duration):
  recur retry(around = around, refocus = refocus, ghosted = #false):
    match around
    | _ :: NothingPict:
        nothing
    | _ :: False || StaticPict:
        let (width, height) = extract_auto_sizes(around, width, height, resize)
        let r: make(width, height)
        let r = if ghosted | rkt.ghost(r) | r
        let r :~ Pict:
          match around
          | around :: _StaticPict:
              let new_handle:
                if order == #'front
                | rkt.#{cc-superimpose}(r, around._handle)
                | rkt.#{cc-superimpose}(around._handle, r)
              static_pict(new_handle, around, around._instances,
                          fun (around): retry(around, #false, ghosted))
          | ~else: static_pict(r, [], empty_instances)
        match refocus
        | #false: r
        | #'around: (if around | r.refocus(around) | r)
        | ~else: r.refocus(refocus)
    | ~else:
        cond
        | refocus is_a Pict:
            convert([around], epoch, duration,
                    fun ([around], dt, n): retry(around, refocus, #false),
                    fun ([around], dt, n): retry(around, refocus, #true),
                    ~dependencies: [around, refocus],
                    ~rebuild: fun ([around, refocus]):
                                retry(around, refocus, #true))
        | ~else:
            convert([around], epoch, duration,
                    fun ([around], dt, n): retry(around, refocus, #false),
                    fun ([around], dt, n): retry(around, refocus, #true),
                    ~rebuild: fun ([around]): retry(around, refocus, #false))

fun do_rectangle(~around: around,
                 ~width: width,
                 ~height: height,
                 ~resize: resize,
                 ~fill: fill,
                 ~line: line,
                 ~line_width: line_width,
                 ~rounded: rounded,
                 ~order: order,
                 ~refocus: refocus,
                 ~epoch: epoch,
                 ~duration: duration):
  do_around(~around: around,
            ~width: width,
            ~height: height,
            ~resize: resize,
            ~order: order,
            ~refocus: refocus,
            ~epoch: epoch,
            ~duration: duration,
            ~make: fun (width, height):                     
                     cond
                     | fill:
                         if rounded
                         | rkt.#{filled-rounded-rectangle}(width,
                                                           height,
                                                           if rounded == #'default | -0.25 | rounded,
                                                           #{#:color}: as_color(fill),
                                                           #{#:draw-border?}: line,
                                                           #{#:border-color}: line && as_color(line),
                                                           #{#:border-width}: as_width(line_width))
                         | rkt.#{filled-rectangle}(width,
                                                   height,
                                                   #{#:color}: as_color(fill),
                                                   #{#:draw-border?}: line,
                                                   #{#:border-color}: line && as_color(line),
                                                   #{#:border-width}: as_width(line_width))
                     | line:
                         if rounded
                         | rkt.#{rounded-rectangle}(width,
                                                    height,
                                                    if rounded == #'default | -0.25 | rounded,
                                                    #{#:border-color}: as_color(line),
                                                    #{#:border-width}: as_width(line_width))
                         | rkt.#{rectangle}(width,
                                            height,
                                            #{#:border-color}: as_color(line),
                                            #{#:border-width}: as_width(line_width))
                     | ~else:
                         rkt.blank(width,
                                   height))

fun rectangle(~around: around :: maybe(Pict) = #false,
              ~width: width :: AutoReal = #'auto,
              ~height: height :: AutoReal = #'auto,
              ~fill: fill :: maybe(ColorMode) = #false,
              ~line: line :: maybe(ColorMode) = !fill && #'inherit,
              ~line_width: line_width :: LineWidth = #'inherit,
              ~rounded: rounded :: maybe(Rounded) = #false,
              ~order: order :: OverlayOrder = #'front,
              ~refocus: refocus :: maybe(Refocus) = #'around,
              ~epoch: epoch :: EpochAlignment = #'center,
              ~duration: duration :: DurationAlignment = #'sustain) :~ Pict:
  do_rectangle(~around: around,
               ~width: width,
               ~height: height,
               ~resize: fun (d, other): d,
               ~fill: fill,
               ~line: line,
               ~line_width: line_width,
               ~rounded: rounded,
               ~order: order,
               ~refocus: refocus,
               ~epoch: epoch,
               ~duration: duration)

fun square(~around: around :: maybe(Pict) = #false,
           ~size: size :: AutoReal = #'auto,
           ~fill: fill :: maybe(ColorMode) = #false,
           ~line: line :: maybe(ColorMode) = !fill && #'inherit,
           ~line_width: line_width :: LineWidth = #'inherit,
           ~rounded: rounded :: maybe(Rounded) = #false,
           ~order: order :: OverlayOrder = #'front,
           ~refocus: refocus :: maybe(Refocus) = #'around,
           ~epoch: epoch :: EpochAlignment = #'center,
           ~duration: duration :: DurationAlignment = #'sustain) :~ Pict:
  do_rectangle(~around: around,
               ~width: size,
               ~height: size,
               ~resize: fun (d, other): math.max(d, other),
               ~line: line,
               ~fill: fill,
               ~line_width: line_width,
               ~rounded: rounded,
               ~order: order,
               ~refocus: refocus,
               ~epoch: epoch,
               ~duration: duration)

fun do_ellipse(~around: around,
               ~width: width,
               ~height: height,
               ~resize: resize,
               ~arc: arc,
               ~start: start,
               ~end: end,
               ~fill: fill,
               ~line: line,
               ~line_width: line_width,
               ~order: order,
               ~refocus: refocus,
               ~epoch: epoch,
               ~duration: duration):
  do_around(~around: around,
            ~width: width,
            ~height: height,
            ~resize: resize,
            ~order: order,
            ~refocus: refocus,
            ~epoch: epoch,
            ~duration: duration,
            ~make: fun (width, height):                     
                     cond
                     | arc:
                         make_dc_pict(fun (dc :~ draw.DC, dx, dy):
                                        dc.arc(draw.Rect(dx, dy, width, height),
                                               if arc == #'cw | end | start,
                                               if arc == #'cw | start | end),
                                      width, height, height, 0,
                                      line,
                                      line_width,
                                      fill)
                     | fill:
                         rkt.#{filled-ellipse}(width,
                                               height,
                                               #{#:color}: as_color(fill),
                                               #{#:draw-border?}: line,
                                               #{#:border-color}: line && as_color(line),
                                               #{#:border-width}: line && as_width(line_width))
                     | line:
                         rkt.#{ellipse}(width,
                                        height,
                                        #{#:border-color}: as_color(line),
                                        #{#:border-width}: as_width(line_width))
                     | ~else:
                         rkt.blank(width,
                                   height))

fun ellipse(~around: around :: maybe(Pict) = #false,
            ~width: width :: AutoReal = #'auto,
            ~height: height :: AutoReal = #'auto,
            ~arc: arc :: maybe(ArcDirection) = #false,
            ~start: start :: Real = 0,
            ~end: end :: Real = 2 * math.pi,
            ~fill: fill :: maybe(ColorMode) = #false,
            ~line: line :: maybe(ColorMode) = !fill && #'inherit,
            ~line_width: line_width :: LineWidth = #'inherit,
            ~order: order :: OverlayOrder = #'front,
            ~refocus: refocus :: maybe(Refocus) = #'around,
            ~epoch: epoch :: EpochAlignment = #'center,
            ~duration: duration :: DurationAlignment = #'sustain) :~ Pict:
  do_ellipse(~around: around,
             ~width: width,
             ~height: height,
             ~resize: fun (d, other): d,
             ~arc: arc,
             ~start: start,
             ~end: end,
             ~fill: fill,
             ~line: line,
             ~line_width: line_width,
             ~order: order,
             ~refocus: refocus,
             ~epoch: epoch,
             ~duration: duration)

fun circle(~around: around :: maybe(Pict) = #false,
           ~size: size :: AutoReal = #'auto,
           ~arc: arc :: maybe(ArcDirection) = #false,
           ~start: start :: Real = 0,
           ~end: end :: Real = 2 * math.pi,
           ~clockwise: clockwise :: Boolean = #false,
           ~fill: fill :: maybe(ColorMode) = #false,
           ~line: line :: maybe(ColorMode) = !fill && #'inherit,
           ~line_width: line_width :: LineWidth = #'inherit,
           ~order: order :: OverlayOrder = #'front,
           ~refocus: refocus :: maybe(Refocus) = #'around,
           ~epoch: epoch :: EpochAlignment = #'center,
           ~duration: duration :: DurationAlignment = #'sustain) :~ Pict:
  do_ellipse(~around: around,
             ~width: size,
             ~height: size,
             ~resize: fun (d, other): math.max(d, other),
             ~arc: arc,
             ~start: start,
             ~end: end,
             ~line: line,
             ~fill: fill,
             ~line_width: line_width,
             ~order: order,
             ~refocus: refocus,
             ~epoch: epoch,
             ~duration: duration)

fun polygon([pt :: draw.PointLike.to_point, ...],
            ~fill: fill :: maybe(ColorMode) = #false,
            ~line: line :: maybe(ColorMode) = !fill && #'inherit,
            ~line_width: line_width :: LineWidth = #'inherit) :~ Pict:
  let w = math.max(pt.x, ...)
  let h = math.max(pt.y, ...)
  static_pict(
    make_dc_pict(fun (dc :~ draw.DC, dx, dy):
                   dc.polygon([pt, ...], ~dx: dx, ~dy: dy),
                 w, h, h, 0,
                 line,
                 line_width,
                 fill),
    [],
    empty_instances
  )

fun bitmap(path :: Path || String) :~ Pict:
  static_pict(rkt.bitmap(path), [], empty_instances)

fun dc(draw :: Function.of_arity(3),
       ~width: width :: Real,
       ~height: height :: Real,
       ~ascent: ascent :: Real = height,
       ~descent: descent :: Real = 0,
       ~fill: fill :: maybe(ColorMode) = #false,
       ~line: line :: maybe(ColorMode) = !fill && #'inherit,
       ~line_width: line_width :: LineWidth = #'inherit) :~ Pict:
  static_pict(make_dc_pict(draw,
                           width,
                           height,
                           ascent,
                           descent,
                           line,
                           line_width,
                           fill),
              [],
              empty_instances)

// ------------------------------------------------------------

class Find(private q, private find, private t_find_or_dt, private is_animated):
  internal _Find

  constructor(q :: Pict,
              ~horiz: horiz :: HorizAlignment = #'center,
              ~vert: vert :: VertAlignment = #'center,
              ~dx: dx :: Real = 0,
              ~dy: dy :: Real = 0,
              ~dhoriz: dx_w :: Real = 0,
              ~dvert: dy_h :: Real = 0,
              ~dt: dt :: Int = 0):
    _Find(q,
          block:
            let proc:
              match horiz
              | #'left:
                  match vert
                  | #'top: rkt.#{lt-find}
                  | #'topline: rkt.#{ltl-find}
                  | #'center: rkt.#{lc-find}
                  | #'baseline: rkt.#{lbl-find}
                  | #'bottom: rkt.#{lb-find}
              | #'center:
                  match vert
                  | #'top: rkt.#{ct-find}
                  | #'topline: rkt.#{ctl-find}
                  | #'center: rkt.#{cc-find}
                  | #'baseline: rkt.#{cbl-find}
                  | #'bottom: rkt.#{cb-find}
              | #'right:
                  match vert
                  | #'top: rkt.#{rt-find}
                  | #'topline: rkt.#{rtl-find}
                  | #'center: rkt.#{rc-find}
                  | #'baseline: rkt.#{rbl-find}
                  | #'bottom: rkt.#{rb-find}
            offset(proc, dx, dy, dx_w, dy_h),
          dt,
          #false)

  method
  | in(p :: Pict):
      in(p, 0, 0)
  | in(p :: Pict, epoch :: Int, n :: Real.in(0, 1)):
      let (x, y) = find(p, q, epoch, n)
      if x
      | values(x, y)
      | error(#'#{Find.in}, "cannot find pict")

  method
  | maybe_in(p :: Pict):
      maybe_in(p, 0, 0)
  | maybe_in(p :: Pict, epoch :: Int, n :: Real.in(0, 1)):
      find(p, q, epoch, n)

  method start_in(p :: Pict) :~ Int:
    fun loop (p :~ Pict, delta):
      if p == q
      | delta
      | for any (c: p.children,
                 start: (p :~ _Pict)._children_starts):
          loop(c, start + delta)
    match t_find_or_dt
    | dt :: Int:
        loop(p, dt) || error(#'#{Find.start_in}, "cannot find pict")
    | ~else:
        let dt = t_find_or_dt(p)
        unless dt is_a Int
        | error(#'#{Find.start_in}, "function did not produce an integer time box difference")
        dt

  method delay(dt :: Int) :~ Find:
    if is_animated
    | _Find(q,
            fun (p, q, epoch, n): find(p, q, epoch - dt, n),
            t_find_or_dt,
            #true)
    | this

  private method _replace(from, to, subst :~ Map):
    cond
    | q:
        let (new_q, subst) = _Pict._replace(q, from, to, subst)
        if new_q === q
        | values(this, subst)
        | values(_Find(new_q, find, t_find_or_dt, is_animated),
                 subst)
    | ~else:
        values(this, subst)

  export:
    abs
    animate
    interpolate
    center
    left
    right
    top
    topline
    baseline
    bottom
    left_top top_left
    left_topline topline_left
    left_center center_left
    left_baseline baseline_left
    left_bottom bottom_left
    center_top top_center
    center_topline topline_center
    center_center
    center_baseline baseline_center
    center_bottom bottom_center
    right_top top_right
    right_topline topline_right
    right_center center_right
    right_baseline baseline_right
    right_bottom bottom_right

fun offset(proc, dx, dy, dx_w, dy_h):
  fun (p :~ Pict, q :~ Pict, epoch :~ Int, n :~ Real.in(0, 1)):
    cond
    | q == nothing:
        #false
    | ~else:
        let p :~ StaticPict = (if p is_a StaticPict
                               | p
                               | p.snapshot(epoch, n))
        fun size_shift(p_handle, q_handle):
          if dx_w .= 0 && dy_h .= 0
          | values(0, 0)
          | let (l, t) = rkt.#{lt-find}(p_handle, q_handle)
            let (r, b) = rkt.#{rb-find}(p_handle, q_handle)
            values((r - l) * dx_w, (b - t) * dy_h)
        match q
        | q :: StaticPict:
            try:
              let (x, y) = proc(p.handle, q.handle)
              let (dx_w, dy_h) = size_shift(p.handle, q.handle)
              values(x + dx + dx_w, y + dy + dy_h)
              ~catch x:
                values(#false, #false)
        | ~else:
            let q_handle = find_instance(p, q)
            if q_handle
            | let (x, y) = proc(p.handle, q_handle)
              let (dx_w, dy_h) = size_shift(p.handle, q_handle)
              values(x + dx + dx_w, y + dy + dy_h)
            | values(#false, #false)

fun abs(dx :: Real, dy :: Real, ~dt: dt :: Int = 0) :: Find:
  _Find(#false, fun (p, q, epoch, n): values(dx, dy), dt, #false)

fun animate(xy_proc :: Function.of_arity(2) || Function.of_arity(3),
            ~time_box: t_proc :: Function.of_arity(1) = fun (p): 0) :: Find:
  _Find(#false,
        fun (p, q, epoch, n):
          call_with_values(
            fun ():
              match xy_proc
              | xy_proc :: Function.of_arity(3):
                  xy_proc(p, epoch, n)
              | xy_proc :: Function.of_arity(2):
                  xy_proc(p, cond
                             | epoch < 0: 0
                             | epoch > 0: 1
                             | ~else: n),
            fun
            | (dx :: Real, dy :: Real):
                values(dx, dy)
            | (_ :: False, _ :: False):
                values(#false, #false)
            | (arg, ...):
                error(#'#{Find.animate}, "invalid result from animation procedure")
          ),
        t_proc,
        #true)

fun interpolate(from :: Find,
                to :: Find,
                ~bend: bend :: Function.of_arity(1) = rkt.#{fast-middle}) :: Find:
  _Find(#false,
        fun (p, q, epoch, n):
          let i_n:
            cond
            | epoch < 0: 0
            | epoch >= 1: 1
            | ~else: bend(n)
          cond
          | i_n .= 0: from.in(p, epoch, n)
          | i_n .= 1: to.in(p, epoch, n)
          | ~else:
              let (from_x, from_y) = from.maybe_in(p, epoch, n)
              let (to_x, to_y) = to.maybe_in(p, epoch, n)
              if from_x && to_x
              | values(from_x * (1 - i_n) + to_x * i_n,
                       from_y * (1 - i_n) + to_y * i_n)
              | values(#false, #false),
        fun (p):
          from.start_in(p),
        #true)

defn.macro 'def_find $name: $rkt':
  'fun $name(q :: Pict,
             ~dx: dx :: Real = 0,
             ~dy: dy :: Real = 0,
             ~dhoriz: dx_w :: Real = 0,
             ~dvert: dy_h :: Real = 0,
             ~dt: dt :: Int = 0) :~ Find:
     _Find(q, offset(rkt . $rkt, dx, dy, dx_w, dy_h), dt, #false)'

def_find center: #{cc-find}
def_find left: #{lc-find}
def_find right: #{rc-find}
def_find top: #{ct-find}
def_find topline: #{ct-find}
def_find baseline: #{cb-find}
def_find bottom: #{cb-find}
  
def_find left_top: #{lt-find}
def_find top_left: #{lt-find}
def_find left_topline: #{ltl-find}
def_find topline_left: #{ltl-find}
def_find left_center: #{lc-find}
def_find center_left: #{lc-find}
def_find left_baseline: #{lbl-find}
def_find baseline_left: #{lbl-find}
def_find left_bottom: #{lb-find}
def_find bottom_left: #{lb-find}

def_find center_top: #{ct-find}
def_find top_center: #{ct-find}
def_find center_topline: #{ctl-find}
def_find topline_center: #{ctl-find}
def_find center_center: #{cc-find}
def_find center_baseline: #{cbl-find}
def_find baseline_center: #{cbl-find}
def_find center_bottom: #{cb-find}
def_find bottom_center: #{cb-find}

def_find right_top: #{rt-find}
def_find top_right: #{rt-find}
def_find right_topline: #{rtl-find}
def_find topline_right: #{rtl-find}
def_find right_center: #{rc-find}
def_find center_right: #{rc-find}
def_find right_baseline: #{rbl-find}
def_find baseline_right: #{rbl-find}
def_find right_bottom: #{rb-find}
def_find bottom_right: #{rb-find}

fun connect(~on: p :: Pict,
            from :: Find,
            to :: Find,
            ~find: find_mode :: FindMode = #'always,
            ~style: style :: ConnectStyle = #'line,
            ~line: color :: ColorMode = #'inherit,
            ~line_width: width :: LineWidth = #'inherit,
            ~order: order :: OverlayOrder = #'front,
            ~arrow_size: arrow_size :: Real = 16,
            ~arrow_solid: solid = #true,
            ~arrow_hidden: hidden = #false,
            ~start_angle: start_angle :: maybe(Real) = #false,
            ~start_pull: start_pull :: maybe(Real) = #false,
            ~end_angle: end_angle :: maybe(Real) = #false,
            ~end_pull: end_pull :: maybe(Real) = #false,
            ~label: label :: maybe(Pict) = #false,
            ~label_dx: label_dx :: Real = 0,
            ~label_dy: label_dy :: Real = 0,
            ~epoch: epoch :: EpochAlignment = #'center,
            ~duration: duration :: DurationAlignment = #'sustain) :~ Pict:
  let p:
    if p is_a _StaticPict
      && !(p is_a NothingPict)
      && (_Find.is_animated(from) || _Find.is_animated(to))
    | pict_animate(fun (n, p): p, [p], 0 /* extent */)
    | p
  recur retry(p = p, label = label, from :~ Find = from, to :~ Find = to, dt = 0, n = 0):
    let label = (label != nothing) && label
    let children = [p] ++ if label | [label] | []
    let dependencies = children ++ [from, to]
    let rebuild:
      if label
      | fun ([p, label, from, to]): retry(p, label, from, to, dt, n)
      | fun ([p, from, to]): retry(p, #false, from, to, dt, n)
    match [p, label]
    | [_ :: NothingPict, _]:
        nothing
    | [p :: _StaticPict, _ :: maybe(_StaticPict)]:
        let (from_x, from_y) = from.maybe_in(p, dt, n)
        let (to_x, to_y) = to.maybe_in(p, dt, n)
        cond
        | from_x && to_x:
            let (proc, [pre, ...], kw_args):
              match style
              | #'line: values(rkt.#{pin-line}, [], {})
              | #'arrow: values(rkt.#{pin-arrow-line},
                                [arrow_size],
                                { #'#{#:solid?}: solid, #'#{#:hide-arrowhead?}: hidden })
              | #'arrows: values(rkt.#{pin-arrows-line},
                                 [arrow_size],
                                 { #'#{#:solid?}: solid, #'#{#:hide-arrowhead?}: hidden })
            let label_handle = label && StaticPict.handle(label)
            fun build(handles):
              let (handle, label_handle):
                match handles
                | [handle, label_handle]: values(handle, label_handle)
                | handle: values(handle, #false)
              proc(pre, ...,
                   handle,
                   handle, fun (p, q): values(from_x, from_y),
                   handle, fun (p, q): values(to_x, to_y),
                   #{#:start-angle}: start_angle,
                   #{#:start-pull}: start_pull,
                   #{#:end-angle}: end_angle,
                   #{#:end-pull}: end_pull,
                   #{#:line-width}: as_width(width),
                   #{#:color}: as_color(color),
                   #{#:under?}: order == #'back,
                   #{#:label}: label_handle,
                   #{#:x-adjust-label}: label_dx,
                   #{#:y-adjust-label}: label_dy,
                   ~& kw_args)
            static_pict(build(if label_handle | [p.handle, label_handle] | p.handle),
                        children,
                        p._instances ++ (if label_handle | _StaticPict._instances(label) | []),
                        ~dependencies: dependencies,
                        rebuild)
        | ~else:
            if find_mode == #'maybe
            | p
            | error(#'connect, if from_x | "cannot find `~to` pict" | "cannot find `~from p ict")
    | ~else:
        convert(children, #'center, #'sustain,
                fun (ps :~ List, dt, n): retry(ps[0], label && ps[1], from, to, 0, 0),
                fun (ps :~ List, dt, n): ps[0],
                ~dependencies: dependencies,
                ~rebuild: rebuild)

def mutable switch = #false
fun set_switch(proc):
  switch := proc

fun pin(q :: Pict,
        ~on: p :: Pict,
        ~at: at :: Find,
        ~find: find_mode :: FindMode = #'always,
        ~pinhole: using :: Find = Find.left_top(q),
        ~order: order :: OverlayOrder = #'front,
        ~epoch: epoch :: EpochAlignment = #'center,
        ~duration: duration :: DurationAlignment = #'sustain,
        ~time: time :: TimeAlignment = #'start) :~ Pict:
  let p:
    if p is_a _StaticPict
      && !(p is_a NothingPict)
      && q is_a _StaticPict
      && (_Find.is_animated(at) || _Find.is_animated(using))
    | pict_animate(fun (n, p): p, [p], 0 /* extent */)
    | p
  recur pin_on(p :~ Pict = p, q :~ Pict = q,
               at :~ Find = at, using :~ Find = using,
               time = time):
    match time
    | dt :: Int:
        let new_q = q.time_pad(~before: dt)
        pin_on(p, new_q, at.delay(dt), using.delay(dt), #'start)
    | #'insert:
        cond
        | p is_a NothingPict:
            nothing
        | q is_a NothingPict:
            p
        | ~else:
            let dt = at.start_in(p)
            let dur = q.duration
            let pre = p.time_pad(~after: dt - p.duration)
            let post = p.time_pad(~before: -dt)
            let mid = p.snapshot(dt, 0).sustain(dur-1)
            let new_p = switch(pre, mid, post)
            let q_dt = dt + 1
            let new_q = q.time_pad(~before: q_dt)
            pin_on(new_p, new_q, at.delay(q_dt), using.delay(q_dt), #'start)
    | #'sync:
        let dt = at.start_in(p)
        let new_q = q.time_pad(~before: dt)
        pin_on(p, new_q, at.delay(dt), using.delay(dt), #'start)
    | #'end:
        let dt = p.duration
        let new_q = q.time_pad(~before: dt)
        pin_on(p, new_q, at.delay(dt), using.delay(dt), #'start)
    | ~else:
        recur retry(ps = [p, q], dt = 0, n = 0):
          match ps
          | [_ :: NothingPict, _]:
              nothing
          | [p, _ :: NothingPict]:
              p
          | [p :: _StaticPict, q :: _StaticPict]:
              let (at_x, at_y): at.maybe_in(p, dt, n)
              when !at_x && find_mode == #'always
              | error(#'pin, "cannot find pict")
              let (dx, dy) = using.in(q, dt, n)
              if at_x
              | let new_handle:
                  (if order == #'front
                   | rkt.#{pin-over}
                   | rkt.#{pin-under})(p.handle,
                                       at_x - dx, at_y - dy,
                                       q.handle)
                static_pict(new_handle,
                            [p, q],
                            [p._instances, q._instances],
                            ~dependencies: [p, q, at, using],
                            fun ([p, q, at, using]): pin_on(p, q, at, using, time))
              | p
          | [p, q]:
              convert([p, q], epoch, duration,
                      retry,
                      ~dependencies: [p, q, at, using],
                      ~rebuild: fun ([p, q, at, using]):
                                  pin_on(p, q, at, using, time))

// ------------------------------------------------------------

fun table(rows :: List.of(List.of(Pict)),
          ~horiz: horiz :: HorizAlignment || List.of(HorizAlignment) = #'left,
          ~vert: vert :: VertAlignment || List.of(VertAlignment) = #'topline,
          ~hsep: hsep :: Real || List.of(Real) = 32,
          ~vsep: vsep :: Real || List.of(Real) = 1,
          ~pad: ins :: matching((_ :: Real) || [_ :: Real, _ :: Real] || [_ :: Real, _ :: Real, _ :: Real, _ :: Real]) = 0,
          ~line: line_c :: maybe(ColorMode) = #false,
          ~line_width: line_width :: LineWidth = #'inherit,
          ~order: order :: OverlayOrder = #'front,
          ~hline: hline :: maybe(ColorMode) = line_c,
          ~hline_width: hline_width :: LineWidth = line_width,
          ~vline: vline :: maybe(ColorMode) = line_c,
          ~vline_width: vline_width :: LineWidth = line_width) :~ Pict:
  match rows
  | [[elem :~ _StaticPict, ...], ...]:
      fun
      | improper([]): rkt.#{cc-superimpose}
      | improper([e]): e
      | improper([a, &l]): Pair.cons(a, improper(l))
      fun to_align(align):
        match align
        | [align, ...]:
            improper([to_align(align), ...])
        | #'left:
            rkt.#{lc-superimpose}
        | #'right:
            rkt.#{rc-superimpose}
        | #'center:
            rkt.#{cc-superimpose}
        | #'top:
            rkt.#{ct-superimpose}
        | #'topline:
            rkt.#{ctl-superimpose}
        | #'baseline:
            rkt.#{cbl-superimpose}
        | #'bottom:
            rkt.#{cb-superimpose}
      let picts = [elem._handle, ..., ...]
      let row_length = rows[0].length()
      let h_align = to_align(horiz)
      let v_align = to_align(vert)
      fun build([handle, ...]):
        let picts = PairList[handle, ...]
        rkt.table(row_length,
                  picts,
                  h_align,
                  v_align,
                  if hsep is_a List | PairList[& hsep] | hsep,
                  if vsep is_a List | PairList[& vsep] | vsep)
      let r = build(picts)
      if !hline && !vline && !line_c
      | let p :~ _Pict = static_pict(r, [elem, ..., ...], [elem._instances, ..., ...], build)
        p._pad(& if ins is_a List | ins | [ins])
      | let picts = [& picts]
        let col_length = rows.length()
        let ws:
          for List (i: 0 .. row_length):
            let [p, ...]: for List (r: 0 .. col_length):
                            picts[i + r * row_length]
            math.max(rkt.#{pict-width}(p), ...)
        let hs:
          for List (i: 0 .. col_length):
            let [p, ...]: for List (r: 0 .. row_length):
                            picts[r + i * row_length]
            math.max(rkt.#{pict-height}(p), ...)
        let r: rkt.inset(r, & if ins is_a List | ins | [ins])
        let (left_ins, top_ins): match ins
                                 | [l, t, _, _]: values(l, t)
                                 | [h, v]: values(h, v)
                                 | a: values(a, a)
        let pin: if order == #'front
                 | rkt.#{pin-under}
                 | rkt.#{pin-over}
        let r:
          if !vline
          | r
          | recur loop(r = r, i = 1, dx = left_ins):
              if i == row_length
              | r
              |  let dx = dx + ws[i-1]
                 let sep:
                   match hsep:
                   | hsep :: List: if hsep.length() > i-1
                                   | hsep[i-1]
                                   | hsep[hsep.length() - 1]
                   | else: hsep
                 loop(pin(r,
                          dx + sep / 2, 0,
                          line(~dy: rkt.#{pict-height}(r),
                               ~line: vline,
                               ~line_width: vline_width).snapshot().handle),
                      i + 1,
                      dx + sep)        
        fun add_lines(r):
          if !hline
          | r
          | recur loop(r = r, i = 1, dy = top_ins):
              if i == col_length
              | r
              |  let dy = dy + hs[i-1]
                 let sep:
                   match vsep:
                   | vsep :: List: if vsep.length() > i-1
                                   | vsep[i-1]
                                   | vsep[vsep.length() - 1]
                   | else: vsep
                 loop(pin(r,
                          0, dy + sep / 2,
                          line(~dx: rkt.#{pict-width}(r),
                               ~line: hline,
                               ~line_width: hline_width).snapshot().handle),
                      i + 1,
                      dy + sep)
        let r = add_lines(r)
        let p = static_pict(r, [elem, ..., ...], [elem._instances, ..., ...],
                            fun (handles): add_lines(build(handles)))
        if line_c
        | rectangle(~around: p, ~line: line_c, ~line_width: line_width, ~order: order)
        | p

def mutable pict_animate = #false
fun set_animate(proc):
  pict_animate := proc
