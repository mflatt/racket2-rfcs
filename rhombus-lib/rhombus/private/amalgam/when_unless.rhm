#lang rhombus/private/amalgam/core
import:
  "core-meta.rkt" open

use_static

export:
  only_space bind:
    when
    unless

bind.macro '$bind when $expr ...':
  bind_meta.pack('(when_infoer,
                   ($bind, $expr ...))')

bind.macro '$bind unless $expr ...':
  bind_meta.pack('(when_infoer,
                   ($bind, !($expr ...)))')

bind.infoer 'when_infoer($static_info, ($bind, $expr_g))':
  let a_info = bind_meta.get_info(bind, static_info)
  let '($a_ann, $a_name, $a_static_info, $a_var_info, $_, $_, $_, $_, $_)':
    bind_meta.unpack_info(a_info)
  let '(($a_var_id, [$a_var_use, ...], $a_statinfo), ...)' = a_var_info
  let ann = Syntax.unwrap(a_ann) +& " when " +& expr_g.to_source_string()
  '($ann,
    $a_name,
    $a_static_info,
    (($a_var_id, [$a_var_use, ..., ~no_let], ()), ...), // drop static info, because we bind it manually
    when_matcher,
    (),
    when_committer,
    when_binder,
    ($a_info, $expr_g))'

bind.matcher 'when_matcher($in_id, ($a_info, $expr_g),
                           $IF, $success, $failure)':
  let '($_, $_, $_, $a_var_info, $a_matcher, $a_evidence, $a_committer, $a_binder, $a_data)':
    bind_meta.unpack_info(a_info)
  let '(($a_var_id, $a_var_use, $a_statinfo), ...)' = a_var_info
  '«$a_matcher($in_id, $a_data, $IF,
               : $a_committer($in_id, $a_evidence, $a_data)
                 $a_binder($in_id, $a_evidence, $a_data)
                 statinfo.macro '$a_var_id': '$a_statinfo'
                 ...
                 $IF $expr_g
                 | $success
                 | $failure,
               $failure)»'

bind.committer 'when_committer($in_id, $evidence, $data)':
  ''

bind.binder 'when_binder($in_id, $evidence, $data)':
  ''
