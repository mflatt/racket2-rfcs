#lang rhombus/static/and_meta

import:
  "util.rhm" open
  lib("scribble/base.rkt")
  "maybe_drop_extras.rhm" open

export:
  index
  as_index
  section_index
  index_section
  ExtrasMap

module for_extras:
  export:
    ExtrasMap
    convert_extras

annot.macro 'ExtrasMap':
  let '$(map_annot :: annot_meta.Parsed)' = 'Map.of(Symbol, Any)'
  let (_, map_statinfo) = annot_meta.unpack_predicate(map_annot)
  annot_meta.pack_predicate('is_extras_map',
                            map_statinfo)

fun index(words :: (String ||  List.of(String)),
          ~content: content :: (String ||  List.of(String)) = words,
          ~extras: extras :: ExtrasMap = {},
          pre_content :: PreContent)
  :: Element:
    ~doc
    let norm_words = (if words is_a String | [words] | words)
    let norm_content = (if content is_a String | [content] | content)
    unless List.length(content) == List.length(words)
    | error(~who: #'index,
            ~exn: Exn.Fail.Annot,
            "word count and content count do no match",
            error.val(~label: "word list", words),
            error.val(~label: "content list", content))
    maybe_drop_extras:
      base.#{index*}(convert_list(words), convert_list(content), pre_content,
                     ~extras: convert_extras(extras))

fun as_index(pre_content :: PreContent,
             ~extras: extras :: ExtrasMap = {}) :: Element:
  ~doc
  maybe_drop_extras:
    base.#{as-index}(pre_content,
                     ~extras: convert_extras(extras))

fun section_index(~extras: extras :: ExtrasMap = {},
                  word :: String, ...):
  ~doc
  maybe_drop_extras:
    base.#{section-index}(word, ...,
                          ~extras: convert_extras(extras))

fun index_section(~tag : tag :: (False || String) = "doc-index")
  :: Part:
    ~doc
    base.#{index-section}(~tag: tag)

fun
| is_extras_map(m :: Map):
    for all ((k, v): m):
      match k
      | #'kind: v is_a String
      | #'language_family: v is_a List.of(String)
      | #'sort_order: v is_a Real
      | #'is_hidden: v is_a Boolean
      | #'module_kind: v is_a Any.of(#'lib, #'lang, #'reader)
      | ~else:
          k is_a Symbol
| is_extras_map(_):
    #false

fun convert_extras(m :~ Map):
  let new_m:
    for Map ((k, v): m):
      match k
      | #'language_family:
          let [str, ...] = v
          values(#'#{language-family}, PairList[str, ...])
      | #'sort_order:
          values(#'#{sort-order}, v)
      | #'is_hidden:
          values(#'#{hidden?}, v)
      | #'module_kind:
          values(#'#{module-kind}, v)
      | ~else:
          values(k, v)
  if m.has_key(#'language_family)
  | new_m
  | new_m ++ { #'#{language-family}: PairList["Rhombus"] }
